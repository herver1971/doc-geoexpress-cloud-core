# coding: utf-8

"""
    GeoServer ACL

    GeoServer Access Control List API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from geonode.geoserver.acl.gsauth_client.configuration import Configuration


class RuleFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instance': 'TextFilter',
        'user': 'TextFilter',
        'roles': 'SetFilter',
        'service': 'TextFilter',
        'request': 'TextFilter',
        'subfield': 'TextFilter',
        'workspace': 'TextFilter',
        'layer': 'TextFilter',
        'source_address': 'AddressRangeFilter'
    }

    attribute_map = {
        'instance': 'instance',
        'user': 'user',
        'roles': 'roles',
        'service': 'service',
        'request': 'request',
        'subfield': 'subfield',
        'workspace': 'workspace',
        'layer': 'layer',
        'source_address': 'sourceAddress'
    }

    def __init__(self, instance=None, user=None, roles=None, service=None, request=None, subfield=None, workspace=None, layer=None, source_address=None, local_vars_configuration=None):  # noqa: E501
        """RuleFilter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._instance = None
        self._user = None
        self._roles = None
        self._service = None
        self._request = None
        self._subfield = None
        self._workspace = None
        self._layer = None
        self._source_address = None
        self.discriminator = None

        self.instance = instance
        self.user = user
        self.roles = roles
        self.service = service
        self.request = request
        self.subfield = subfield
        self.workspace = workspace
        self.layer = layer
        self.source_address = source_address

    @property
    def instance(self):
        """Gets the instance of this RuleFilter.  # noqa: E501


        :return: The instance of this RuleFilter.  # noqa: E501
        :rtype: TextFilter
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this RuleFilter.


        :param instance: The instance of this RuleFilter.  # noqa: E501
        :type instance: TextFilter
        """

        self._instance = instance

    @property
    def user(self):
        """Gets the user of this RuleFilter.  # noqa: E501


        :return: The user of this RuleFilter.  # noqa: E501
        :rtype: TextFilter
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this RuleFilter.


        :param user: The user of this RuleFilter.  # noqa: E501
        :type user: TextFilter
        """

        self._user = user

    @property
    def roles(self):
        """Gets the roles of this RuleFilter.  # noqa: E501


        :return: The roles of this RuleFilter.  # noqa: E501
        :rtype: SetFilter
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this RuleFilter.


        :param roles: The roles of this RuleFilter.  # noqa: E501
        :type roles: SetFilter
        """

        self._roles = roles

    @property
    def service(self):
        """Gets the service of this RuleFilter.  # noqa: E501


        :return: The service of this RuleFilter.  # noqa: E501
        :rtype: TextFilter
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this RuleFilter.


        :param service: The service of this RuleFilter.  # noqa: E501
        :type service: TextFilter
        """

        self._service = service

    @property
    def request(self):
        """Gets the request of this RuleFilter.  # noqa: E501


        :return: The request of this RuleFilter.  # noqa: E501
        :rtype: TextFilter
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this RuleFilter.


        :param request: The request of this RuleFilter.  # noqa: E501
        :type request: TextFilter
        """

        self._request = request

    @property
    def subfield(self):
        """Gets the subfield of this RuleFilter.  # noqa: E501


        :return: The subfield of this RuleFilter.  # noqa: E501
        :rtype: TextFilter
        """
        return self._subfield

    @subfield.setter
    def subfield(self, subfield):
        """Sets the subfield of this RuleFilter.


        :param subfield: The subfield of this RuleFilter.  # noqa: E501
        :type subfield: TextFilter
        """

        self._subfield = subfield

    @property
    def workspace(self):
        """Gets the workspace of this RuleFilter.  # noqa: E501


        :return: The workspace of this RuleFilter.  # noqa: E501
        :rtype: TextFilter
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this RuleFilter.


        :param workspace: The workspace of this RuleFilter.  # noqa: E501
        :type workspace: TextFilter
        """

        self._workspace = workspace

    @property
    def layer(self):
        """Gets the layer of this RuleFilter.  # noqa: E501


        :return: The layer of this RuleFilter.  # noqa: E501
        :rtype: TextFilter
        """
        return self._layer

    @layer.setter
    def layer(self, layer):
        """Sets the layer of this RuleFilter.


        :param layer: The layer of this RuleFilter.  # noqa: E501
        :type layer: TextFilter
        """

        self._layer = layer

    @property
    def source_address(self):
        """Gets the source_address of this RuleFilter.  # noqa: E501


        :return: The source_address of this RuleFilter.  # noqa: E501
        :rtype: AddressRangeFilter
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this RuleFilter.


        :param source_address: The source_address of this RuleFilter.  # noqa: E501
        :type source_address: AddressRangeFilter
        """

        self._source_address = source_address

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuleFilter):
            return True

        return self.to_dict() != other.to_dict()
