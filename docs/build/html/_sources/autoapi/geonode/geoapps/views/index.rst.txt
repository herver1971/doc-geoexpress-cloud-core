geonode.geoapps.views
=====================

.. py:module:: geonode.geoapps.views


Attributes
----------

.. autoapisummary::

   geonode.geoapps.views.logger
   geonode.geoapps.views._PERMISSION_MSG_DELETE
   geonode.geoapps.views._PERMISSION_MSG_GENERIC
   geonode.geoapps.views._PERMISSION_MSG_LOGIN
   geonode.geoapps.views._PERMISSION_MSG_SAVE
   geonode.geoapps.views._PERMISSION_MSG_METADATA
   geonode.geoapps.views._PERMISSION_MSG_VIEW
   geonode.geoapps.views._PERMISSION_MSG_UNKNOWN


Functions
---------

.. autoapisummary::

   geonode.geoapps.views._resolve_geoapp
   geonode.geoapps.views.new_geoapp
   geonode.geoapps.views.geoapp_edit
   geonode.geoapps.views.geoapp_metadata_detail
   geonode.geoapps.views.geoapp_metadata
   geonode.geoapps.views.geoapp_metadata_advanced


Module Contents
---------------

.. py:data:: logger

.. py:data:: _PERMISSION_MSG_DELETE

.. py:data:: _PERMISSION_MSG_GENERIC

.. py:data:: _PERMISSION_MSG_LOGIN

.. py:data:: _PERMISSION_MSG_SAVE

.. py:data:: _PERMISSION_MSG_METADATA

.. py:data:: _PERMISSION_MSG_VIEW

.. py:data:: _PERMISSION_MSG_UNKNOWN

.. py:function:: _resolve_geoapp(request, id, permission='base.change_resourcebase', msg=_PERMISSION_MSG_GENERIC, **kwargs)

   Resolve the GeoApp by the provided typename and check the optional permission.


.. py:function:: new_geoapp(request, template='apps/app_new.html')

.. py:function:: geoapp_edit(request, geoappid, template='apps/app_edit.html')

   The view that returns the app composer opened to the app with the given app ID.


.. py:function:: geoapp_metadata_detail(request, geoappid, template='apps/app_metadata_detail.html', custom_metadata=None)

.. py:function:: geoapp_metadata(request, geoappid, template='apps/app_metadata.html', ajax=True, panel_template='layouts/app_panels.html', custom_metadata=None)

.. py:function:: geoapp_metadata_advanced(request, geoappid)

