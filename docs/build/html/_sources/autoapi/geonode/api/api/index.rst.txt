geonode.api.api
===============

.. py:module:: geonode.api.api


Attributes
----------

.. autoapisummary::

   geonode.api.api.FILTER_TYPES


Classes
-------

.. autoapisummary::

   geonode.api.api.CountJSONSerializer
   geonode.api.api.TypeFilteredResource
   geonode.api.api.TagResource
   geonode.api.api.ThesaurusKeywordResource
   geonode.api.api.RegionResource
   geonode.api.api.TopicCategoryResource
   geonode.api.api.GroupCategoryResource
   geonode.api.api.GroupProfileResource
   geonode.api.api.GroupResource
   geonode.api.api.ProfileResource
   geonode.api.api.OwnersResource
   geonode.api.api.GeoserverStyleResource
   geonode.api.api.StyleResource


Functions
---------

.. autoapisummary::

   geonode.api.api._get_resource_counts


Module Contents
---------------

.. py:data:: FILTER_TYPES

.. py:class:: CountJSONSerializer

   Bases: :py:obj:`tastypie.serializers.Serializer`


   Custom serializer to post process the api and add counts


   .. py:method:: get_resources_counts(options)


   .. py:method:: to_json(data, options=None)


.. py:class:: TypeFilteredResource

   Bases: :py:obj:`tastypie.resources.ModelResource`


   Common resource used to apply faceting to categories, keywords, and
   regions based on the type passed as query parameter in the form
   type:dataset/map/document


   .. py:attribute:: count


   .. py:method:: build_filters(filters=None, ignore_bad_filters=False)


   .. py:method:: serialize(request, data, format, options=None)


.. py:class:: TagResource

   Bases: :py:obj:`TypeFilteredResource`


   Tags api


   .. py:method:: serialize(request, data, format, options=None)


   .. py:class:: Meta

      .. py:attribute:: queryset


      .. py:attribute:: resource_name
         :value: 'keywords'



      .. py:attribute:: allowed_methods
         :value: ['get']



      .. py:attribute:: filtering


      .. py:attribute:: serializer


      .. py:attribute:: authorization



.. py:class:: ThesaurusKeywordResource

   Bases: :py:obj:`TypeFilteredResource`


   ThesaurusKeyword api


   .. py:attribute:: thesaurus_identifier


   .. py:attribute:: label_id


   .. py:method:: build_filters(filters={}, ignore_bad_filters=False)

      adds filtering by current language



   .. py:method:: serialize(request, data, format, options={})


   .. py:method:: dehydrate_id(bundle)


   .. py:method:: dehydrate_label_id(bundle)


   .. py:method:: dehydrate_thesaurus_identifier(bundle)


   .. py:method:: dehydrate(bundle)


   .. py:class:: Meta

      .. py:attribute:: queryset


      .. py:attribute:: resource_name
         :value: 'thesaurus/keywords'



      .. py:attribute:: allowed_methods
         :value: ['get']



      .. py:attribute:: filtering


      .. py:attribute:: serializer


      .. py:attribute:: authorization



.. py:class:: RegionResource

   Bases: :py:obj:`TypeFilteredResource`


   Regions api


   .. py:method:: serialize(request, data, format, options=None)


   .. py:class:: Meta

      .. py:attribute:: queryset


      .. py:attribute:: resource_name
         :value: 'regions'



      .. py:attribute:: allowed_methods
         :value: ['get']



      .. py:attribute:: filtering


      .. py:attribute:: serializer


      .. py:attribute:: authorization



.. py:class:: TopicCategoryResource

   Bases: :py:obj:`TypeFilteredResource`


   Category api


   .. py:attribute:: layers_count


   .. py:method:: dehydrate_datasets_count(bundle)


   .. py:method:: serialize(request, data, format, options=None)


   .. py:class:: Meta

      .. py:attribute:: queryset


      .. py:attribute:: resource_name
         :value: 'categories'



      .. py:attribute:: allowed_methods
         :value: ['get']



      .. py:attribute:: filtering


      .. py:attribute:: serializer


      .. py:attribute:: authorization



.. py:class:: GroupCategoryResource

   Bases: :py:obj:`TypeFilteredResource`


   Common resource used to apply faceting to categories, keywords, and
   regions based on the type passed as query parameter in the form
   type:dataset/map/document


   .. py:attribute:: detail_url


   .. py:attribute:: member_count


   .. py:attribute:: resource_counts


   .. py:class:: Meta

      .. py:attribute:: queryset


      .. py:attribute:: allowed_methods
         :value: ['get']



      .. py:attribute:: include_resource_uri
         :value: False



      .. py:attribute:: filtering


      .. py:attribute:: ordering
         :value: ['name']



      .. py:attribute:: authorization



   .. py:method:: apply_filters(request, applicable_filters)


   .. py:method:: dehydrate_detail_url(bundle)


   .. py:method:: dehydrate_member_count(bundle)


   .. py:method:: dehydrate(bundle)

      Provide additional resource counts



.. py:class:: GroupProfileResource

   Bases: :py:obj:`tastypie.resources.ModelResource`


   .. py:attribute:: categories


   .. py:attribute:: member_count


   .. py:attribute:: manager_count


   .. py:attribute:: logo_url


   .. py:attribute:: detail_url


   .. py:class:: Meta

      .. py:attribute:: queryset


      .. py:attribute:: resource_name
         :value: 'group_profile'



      .. py:attribute:: allowed_methods
         :value: ['get']



      .. py:attribute:: filtering


      .. py:attribute:: ordering
         :value: ['title', 'last_modified']



      .. py:attribute:: authorization



   .. py:method:: dehydrate_member_count(bundle)

      Provide relative URL to the geonode UI's page on the group



   .. py:method:: dehydrate_manager_count(bundle)

      Provide relative URL to the geonode UI's page on the group



   .. py:method:: dehydrate_detail_url(bundle)

      Return relative URL to the geonode UI's page on the group



   .. py:method:: dehydrate_logo_url(bundle)


.. py:class:: GroupResource

   Bases: :py:obj:`tastypie.resources.ModelResource`


   .. py:attribute:: group_profile


   .. py:attribute:: resource_counts


   .. py:class:: Meta

      .. py:attribute:: queryset


      .. py:attribute:: resource_name
         :value: 'groups'



      .. py:attribute:: allowed_methods
         :value: ['get']



      .. py:attribute:: filtering


      .. py:attribute:: ordering
         :value: ['name', 'last_modified']



      .. py:attribute:: authorization



   .. py:method:: dehydrate(bundle)

      Provide additional resource counts



   .. py:method:: get_object_list(request)

      Overridden in order to exclude the ``anoymous`` group from the list




.. py:class:: ProfileResource

   Bases: :py:obj:`TypeFilteredResource`


   Profile api


   .. py:attribute:: avatar_100


   .. py:attribute:: profile_detail_url


   .. py:attribute:: email


   .. py:attribute:: layers_count


   .. py:attribute:: maps_count


   .. py:attribute:: documents_count


   .. py:attribute:: current_user


   .. py:attribute:: activity_stream_url


   .. py:method:: build_filters(filters=None, ignore_bad_filters=False)

      adds filtering by group functionality



   .. py:method:: apply_filters(request, applicable_filters)

      filter by group if applicable by group functionality



   .. py:method:: dehydrate_email(bundle)


   .. py:method:: dehydrate_datasets_count(bundle)


   .. py:method:: dehydrate_maps_count(bundle)


   .. py:method:: dehydrate_documents_count(bundle)


   .. py:method:: dehydrate_avatar_100(bundle)


   .. py:method:: dehydrate_profile_detail_url(bundle)


   .. py:method:: dehydrate_current_user(bundle)


   .. py:method:: dehydrate_activity_stream_url(bundle)


   .. py:method:: dehydrate(bundle)

      Protects user's personal information from non staff



   .. py:method:: prepend_urls()


   .. py:method:: serialize(request, data, format, options=None)


   .. py:class:: Meta

      .. py:attribute:: queryset


      .. py:attribute:: resource_name
         :value: 'profiles'



      .. py:attribute:: allowed_methods
         :value: ['get']



      .. py:attribute:: ordering
         :value: ['username', 'date_joined']



      .. py:attribute:: excludes
         :value: ['is_staff', 'password', 'is_superuser', 'is_active', 'last_login']



      .. py:attribute:: filtering


      .. py:attribute:: serializer


      .. py:attribute:: authorization



.. py:class:: OwnersResource

   Bases: :py:obj:`TypeFilteredResource`


   Owners api, lighter and faster version of the profiles api


   .. py:attribute:: full_name


   .. py:method:: apply_filters(request, applicable_filters)

      filter by group if applicable by group functionality



   .. py:method:: dehydrate_full_name(bundle)


   .. py:method:: dehydrate_email(bundle)


   .. py:method:: dehydrate(bundle)

      Protects user's personal information from non staff



   .. py:method:: serialize(request, data, format, options=None)


   .. py:class:: Meta

      .. py:attribute:: queryset


      .. py:attribute:: resource_name
         :value: 'owners'



      .. py:attribute:: allowed_methods
         :value: ['get']



      .. py:attribute:: ordering
         :value: ['username', 'date_joined']



      .. py:attribute:: excludes
         :value: ['is_staff', 'password', 'is_superuser', 'is_active', 'last_login']



      .. py:attribute:: filtering


      .. py:attribute:: serializer


      .. py:attribute:: authorization



.. py:class:: GeoserverStyleResource

   Bases: :py:obj:`tastypie.resources.ModelResource`


   Styles API for Geoserver backend.


   .. py:attribute:: body


   .. py:attribute:: name


   .. py:attribute:: title


   .. py:attribute:: layer


   .. py:attribute:: version


   .. py:attribute:: style_url


   .. py:attribute:: workspace


   .. py:attribute:: type


   .. py:class:: Meta

      .. py:attribute:: paginator_class


      .. py:attribute:: queryset


      .. py:attribute:: resource_name
         :value: 'styles'



      .. py:attribute:: detail_uri_name
         :value: 'id'



      .. py:attribute:: authorization


      .. py:attribute:: allowed_methods
         :value: ['get']



      .. py:attribute:: filtering



   .. py:method:: build_filters(filters=None, **kwargs)

      Apply custom filters for layer.



   .. py:method:: populate_object(style)

      Populate results with necessary fields

      :param style: Style objects
      :type style: Style
      :return:



   .. py:method:: build_bundle(obj=None, data=None, request=None, **kwargs)

      Override build_bundle method to add additional info.



.. py:class:: StyleResource

   Bases: :py:obj:`GeoserverStyleResource`


   Wrapper for Generic Style Resource


.. py:function:: _get_resource_counts(request, resourcebase_filter_kwargs)

   Return a dict with counts of resources of various types

   The ``resourcebase_filter_kwargs`` argument should be a dict with a suitable
   queryset filter that can be applied to select only the relevant
   ``ResourceBase`` objects to use when retrieving counts. For example::

       _get_resource_counts(
           request,
           {
               'group__slug': 'my-group',
           }
       )

   The above function call would result in only counting ``ResourceBase``
   objects that belong to the group that has ``my-group`` as slug



