geonode.client.templatetags.client_lib_tags
===========================================

.. py:module:: geonode.client.templatetags.client_lib_tags


Attributes
----------

.. autoapisummary::

   geonode.client.templatetags.client_lib_tags.register


Classes
-------

.. autoapisummary::

   geonode.client.templatetags.client_lib_tags.GeoNodeClientLibraryTag


Functions
---------

.. autoapisummary::

   geonode.client.templatetags.client_lib_tags.mapbox_access_token
   geonode.client.templatetags.client_lib_tags.bing_api_key
   geonode.client.templatetags.client_lib_tags.google_api_key
   geonode.client.templatetags.client_lib_tags.dataset_list_url
   geonode.client.templatetags.client_lib_tags.dataset_upload_url
   geonode.client.templatetags.client_lib_tags.dataset_detail_url
   geonode.client.templatetags.client_lib_tags.map_list_url
   geonode.client.templatetags.client_lib_tags.map_detail_url
   geonode.client.templatetags.client_lib_tags.document_list_url
   geonode.client.templatetags.client_lib_tags.document_detail_url
   geonode.client.templatetags.client_lib_tags.geoapp_list_url
   geonode.client.templatetags.client_lib_tags.geoapp_detail_url
   geonode.client.templatetags.client_lib_tags.parse_tag
   geonode.client.templatetags.client_lib_tags.do_get_client_library_template


Module Contents
---------------

.. py:data:: register

.. py:function:: mapbox_access_token()

.. py:function:: bing_api_key()

.. py:function:: google_api_key()

.. py:function:: dataset_list_url()

.. py:function:: dataset_upload_url()

.. py:function:: dataset_detail_url(layer)

.. py:function:: map_list_url()

.. py:function:: map_detail_url(map)

.. py:function:: document_list_url()

.. py:function:: document_detail_url(document)

.. py:function:: geoapp_list_url()

.. py:function:: geoapp_detail_url(geoapp)

.. py:function:: parse_tag(token, parser)

   Generic template tag parser.

   Returns a three-tuple: (tag_name, args, kwargs)

   tag_name is a string, the name of the tag.

   args is a list of FilterExpressions, from all the arguments that didn't look like kwargs, in the order they occurred, including any that were mingled amongst kwargs.

   kwargs is a dictionary mapping kwarg names to FilterExpressions, for all the arguments that looked like kwargs, including any that were mingled amongst args.

   (At rendering time, a FilterExpression f can be evaluated by calling f.resolve(context).)


.. py:class:: GeoNodeClientLibraryTag(tag_name, *args, **kwargs)

   Bases: :py:obj:`django.template.Node`


   .. py:attribute:: tag_name


   .. py:method:: render(context)


.. py:function:: do_get_client_library_template(parser, token)

