geonode.services.serviceprocessors.base
=======================================

.. py:module:: geonode.services.serviceprocessors.base

.. autoapi-nested-parse::

   Remote service handling base classes and helpers.



Attributes
----------

.. autoapisummary::

   geonode.services.serviceprocessors.base.catalog
   geonode.services.serviceprocessors.base.logger


Classes
-------

.. autoapisummary::

   geonode.services.serviceprocessors.base.ServiceHandlerBase
   geonode.services.serviceprocessors.base.CascadableServiceHandlerMixin


Functions
---------

.. autoapisummary::

   geonode.services.serviceprocessors.base.get_geoserver_cascading_workspace


Module Contents
---------------

.. py:data:: catalog
   :value: None


.. py:data:: logger

.. py:function:: get_geoserver_cascading_workspace(create=True)

   Return the geoserver workspace used for cascaded services
   The workspace can be created it if needed.


.. py:class:: ServiceHandlerBase(url, geonode_service_id=None)

   Bases: :py:obj:`object`


   Base class for remote service handlers

   This class is not to be instantiated directly, but rather subclassed by
   concrete implementations. The method stubs defined here must be implemented
   in derived classes.



   .. py:attribute:: url
      :value: None



   .. py:attribute:: name
      :value: None



   .. py:attribute:: service_type
      :value: None



   .. py:attribute:: indexing_method
      :value: None



   .. py:attribute:: geonode_service_id
      :value: None



   .. py:property:: is_cascaded


   .. py:method:: probe()


   .. py:method:: get_harvester_configuration_options()


   .. py:method:: create_geonode_service(owner, parent=None)
      :abstractmethod:


      Create a new geonode.service.models.Service instance
      Saving the service instance in the database is not a concern of this
      method, it only deals with creating the instance.

      :arg owner: The user who will own the service instance
      :type owner: geonode.people.models.Profile



   .. py:method:: has_resources()


   .. py:method:: has_unharvested_resources(geonode_service)


   .. py:method:: get_keywords()
      :abstractmethod:



   .. py:method:: get_resource(resource_id)

      Return a single resource's representation.



   .. py:method:: get_resources()

      Return an iterable with the service's resources.



   .. py:method:: harvest_resource(resource_id, geonode_service)

      Harvest a single resource from the service
      This method creates new ``geonode.layers.models.Dataset``
      instances (and their related objects too) and save them in the
      database.

      :arg resource_id: The resource's identifier
      :type resource_id: str
      :arg geonode_service: The already saved service instance
      :type geonode_service: geonode.services.models.Service



.. py:class:: CascadableServiceHandlerMixin

   .. py:method:: create_cascaded_store(service)
      :abstractmethod:



