geonode.services.views
======================

.. py:module:: geonode.services.views


Attributes
----------

.. autoapisummary::

   geonode.services.views.logger


Functions
---------

.. autoapisummary::

   geonode.services.views.services
   geonode.services.views.register_service
   geonode.services.views._get_service_handler
   geonode.services.views.harvest_resources_handle_get
   geonode.services.views.harvest_resources_handle_post
   geonode.services.views.harvest_resources
   geonode.services.views.harvest_single_resource
   geonode.services.views.rescan_service
   geonode.services.views.service_detail
   geonode.services.views.edit_service
   geonode.services.views.remove_service


Module Contents
---------------

.. py:data:: logger

.. py:function:: services(request)

   This view shows the list of all registered services


.. py:function:: register_service(request)

.. py:function:: _get_service_handler(request, service)

   Add the service handler to the HttpSession.
   We use the django session object to store the service handler's
   representation of the remote service between sequentially logic steps.
   This is done in order to improve user experience, as we avoid making
   multiple Capabilities requests (this is a time saver on servers that
   feature many layers.


.. py:function:: harvest_resources_handle_get(request, service, handler)

.. py:function:: harvest_resources_handle_post(request, service, handler)

.. py:function:: harvest_resources(request, service_id)

.. py:function:: harvest_single_resource(request, service_id, resource_id)

.. py:function:: rescan_service(request, service_id)

.. py:function:: service_detail(request, service_id)

   This view shows the details of a service


.. py:function:: edit_service(request, service_id)

   Edit an existing Service


.. py:function:: remove_service(request, service_id)

   Delete a service and its constituent layers


