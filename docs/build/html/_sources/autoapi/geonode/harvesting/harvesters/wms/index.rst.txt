geonode.harvesting.harvesters.wms
=================================

.. py:module:: geonode.harvesting.harvesters.wms


Attributes
----------

.. autoapisummary::

   geonode.harvesting.harvesters.wms.logger


Classes
-------

.. autoapisummary::

   geonode.harvesting.harvesters.wms.OgcWmsHarvester


Functions
---------

.. autoapisummary::

   geonode.harvesting.harvesters.wms.WebMapService
   geonode.harvesting.harvesters.wms._get_nsmap


Module Contents
---------------

.. py:data:: logger

.. py:function:: WebMapService(url, version='1.3.0', xml=None, username=None, password=None, parse_remote_metadata=False, timeout=30, headers=None)

   API for Web Map Service (WMS) methods and metadata.


.. py:class:: OgcWmsHarvester(*args, dataset_title_filter: Optional[str] = None, **kwargs)

   Bases: :py:obj:`geonode.harvesting.harvesters.base.BaseHarvesterWorker`


   Harvester for resources coming from OGC WMS web services


   .. py:attribute:: dataset_title_filter
      :type:  Optional[str]


   .. py:attribute:: _base_wms_parameters
      :type:  Dict


   .. py:attribute:: http_session


   .. py:attribute:: headers


   .. py:property:: allows_copying_resources
      :type: bool



   .. py:method:: from_django_record(record: geonode.harvesting.models.Harvester)
      :classmethod:



   .. py:method:: get_extra_config_schema() -> Optional[Dict]
      :classmethod:



   .. py:method:: get_wms_operations(url, version=None) -> Optional[Dict]
      :classmethod:



   .. py:method:: get_ogc_wms_url(wms_url, version=None)


   .. py:method:: get_capabilities() -> requests.Response


   .. py:method:: get_num_available_resources() -> int


   .. py:method:: list_resources(offset: Optional[int] = 0) -> List[geonode.harvesting.harvesters.base.BriefRemoteResource]


   .. py:method:: check_availability(timeout_seconds: Optional[int] = 5) -> bool


   .. py:method:: get_geonode_resource_type(remote_resource_type: str) -> geonode.base.models.ResourceBase

      Return resource type class from resource type string.



   .. py:method:: get_geonode_resource_defaults(harvested_info: geonode.harvesting.harvesters.base.HarvestedResourceInfo, harvestable_resource: geonode.harvesting.models.HarvestableResource) -> Dict


   .. py:method:: get_resource(harvestable_resource: geonode.harvesting.models.HarvestableResource) -> Optional[geonode.harvesting.harvesters.base.HarvestedResourceInfo]


   .. py:method:: _get_data() -> Dict

      Return data from the harvester URL in JSON format.



   .. py:method:: _get_contact(element: lxml.etree.Element) -> dict

      Return contact from element



   .. py:method:: _get_cleaned_url_params(url)


   .. py:method:: _layer_element_to_json(layer_element: lxml.etree.Element) -> dict

      Return json of layer from xml element



   .. py:method:: finalize_resource_update(geonode_resource: geonode.base.models.ResourceBase, harvested_info: geonode.harvesting.harvesters.base.HarvestedResourceInfo, harvestable_resource: geonode.harvesting.models.HarvestableResource) -> geonode.base.models.ResourceBase

      Create a thumbnail with a WMS request.



.. py:function:: _get_nsmap(original: Dict)

   Prepare namespaces dict for running xpath queries.

   lxml complains when a namespaces dict has an entry with None as a key.



