geonode.storage.tests
=====================

.. py:module:: geonode.storage.tests


Classes
-------

.. autoapisummary::

   geonode.storage.tests.TestDropboxStorageManager
   geonode.storage.tests.TestGoogleStorageManager
   geonode.storage.tests.TestAwsStorageManager
   geonode.storage.tests.TestStorageManager
   geonode.storage.tests.TestDataRetriever


Module Contents
---------------

.. py:class:: TestDropboxStorageManager

   Bases: :py:obj:`django.test.testcases.SimpleTestCase`


   .. py:method:: setUp()


   .. py:method:: test_dropbox_deleted(dbx)

      Will test that the function returns the expected result
      and that the DropBoxStorage function as been called with the expected parameters



   .. py:method:: test_dropbox_exists(dbx)

      Will test that the function returns the expected result
      and that the DropBoxStorage function as been called with the expected parameters



   .. py:method:: test_dropbox_listdir(dbx)

      Will test that the function returns the expected result
      and that the DropBoxStorage function as been called with the expected parameters



   .. py:method:: test_dropbox_open(dbx)

      Will test that the function returns the expected result
      and that the DropBoxStorage function as been called with the expected parameters



   .. py:method:: test_dropbox_path(dbx)

      Will test that the function returns the expected result
      and that the DropBoxStorage function as been called with the expected parameters



   .. py:method:: test_dropbox_save(dbx)

      Will test that the function returns the expected result
      and that the DropBoxStorage function as been called with the expected parameters



   .. py:method:: test_dropbox_size(dbx)

      Will test that the function returns the expected result
      and that the DropBoxStorage function as been called with the expected parameters



.. py:class:: TestGoogleStorageManager

   Bases: :py:obj:`django.test.testcases.SimpleTestCase`


   .. py:method:: setUp()


   .. py:method:: test_google_deleted(gcs)

      Will test that the function returns the expected result
      and that the GoogleCloudStorage function as been called with the expected parameters



   .. py:method:: test_google_exists(gcs)

      Will test that the function returns the expected result
      and that the GoogleCloudStorage function as been called with the expected parameters



   .. py:method:: test_google_listdir(gcs)

      Will test that the function returns the expected result
      and that the GoogleCloudStorage function as been called with the expected parameters



   .. py:method:: test_google_open(gcs)

      Will test that the function returns the expected result
      and that the GoogleCloudStorage function as been called with the expected parameters



   .. py:method:: test_google_path()

      Will test that the function returns the expected result
      and that the GoogleCloudStorage function as been called with the expected parameters



   .. py:method:: test_google_save(gcs)

      Will test that the function returns the expected result
      and that the GoogleCloudStorage function as been called with the expected parameters



   .. py:method:: test_google_size(gcs)

      Will test that the function returns the expected result
      and that the GoogleCloudStorage function as been called with the expected parameters



.. py:class:: TestAwsStorageManager

   Bases: :py:obj:`django.test.testcases.SimpleTestCase`


   .. py:method:: setUp()


   .. py:method:: test_aws_deleted(aws)

      Will test that the function returns the expected result
      and that the AwsStorageManager function as been called with the expected parameters



   .. py:method:: test_aws_exists(aws)

      Will test that the function returns the expected result
      and that the AwsStorageManager function as been called with the expected parameters



   .. py:method:: test_aws_listdir(aws)

      Will test that the function returns the expected result
      and that the AwsStorageManager function as been called with the expected parameters



   .. py:method:: test_aws_open(aws)

      Will test that the function returns the expected result
      and that the AwsStorageManager function as been called with the expected parameters



   .. py:method:: test_aws_path(aws)

      Will test that the function returns the expected result
      and that the AwsStorageManager function as been called with the expected parameters



   .. py:method:: test_aws_save(aws)

      Will test that the function returns the expected result
      and that the AwsStorageManager function as been called with the expected parameters



   .. py:method:: test_aws_size(aws)

      Will test that the function returns the expected result
      and that the AwsStorageManager function as been called with the expected parameters



.. py:class:: TestStorageManager

   Bases: :py:obj:`geonode.tests.base.GeoNodeBaseTestSupport`


   .. py:method:: setUp()


   .. py:method:: test_storage_manager_deleted(strg)

      Will test that the function returns the expected result
      and that the StorageManager function as been called with the expected parameters



   .. py:method:: test_storage_manager_exists(strg)

      Will test that the function returns the expected result
      and that the StorageManager function as been called with the expected parameters



   .. py:method:: test_storage_manager_listdir(strg)

      Will test that the function returns the expected result
      and that the StorageManager function as been called with the expected parameters



   .. py:method:: test_storage_manager_open(strg)

      Will test that the function returns the expected result
      and that the StorageManager function as been called with the expected parameters



   .. py:method:: test_storage_manager_path(strg)

      Will test that the function returns the expected result
      and that the StorageManager function as been called with the expected parameters



   .. py:method:: test_storage_manager_save(strg)

      Will test that the function returns the expected result
      and that the StorageManager function as been called with the expected parameters



   .. py:method:: test_storage_manager_size(strg)

      Will test that the function returns the expected result
      and that the StorageManager function as been called with the expected parameters



   .. py:method:: test_storage_manager_replace_files_list()

      Will test that the function returns the expected result
      and that the StorageManager function as been called with the expected parameters



   .. py:method:: test_storage_manager_replace_single_file(path, strg)

      Will test that the function returns the expected result
      and that the StorageManager function as been called with the expected parameters



   .. py:method:: test_storage_manager_copy()

      Test that the copy works as expected and the permissions are corerct



.. py:class:: TestDataRetriever

   Bases: :py:obj:`django.test.testcases.TestCase`


   .. py:method:: setUpClass() -> None
      :classmethod:



   .. py:method:: setUp()


   .. py:method:: test_file_are_not_transfered_local()


   .. py:method:: test_clone_remote_files_local()


   .. py:method:: test_get_retrieved_paths_local()


   .. py:method:: test_delete_retrieved_paths_local()


   .. py:method:: test_file_are_not_transfered_remote()


   .. py:method:: test_clone_remote_files_remote()


   .. py:method:: test_get_retrieved_paths_remote()


   .. py:method:: test_delete_retrieved_paths_remote()


   .. py:method:: test_storage_manager_rmtree()

      Will test that the rmtree function works as expected



   .. py:method:: test_zip_file_should_correctly_recognize_main_extension_with_csv()


   .. py:method:: test_zip_file_should_correctly_index_file_extensions()


   .. py:method:: test_zip_file_should_correctly_recognize_main_extension_with_kmz()


   .. py:method:: test_zip_file_should_correctly_recognize_main_extension_with_shp()


