geonode.security.views
======================

.. py:module:: geonode.security.views


Attributes
----------

.. autoapisummary::

   geonode.security.views.logger


Functions
---------

.. autoapisummary::

   geonode.security.views._perms_info
   geonode.security.views._perms_info_json
   geonode.security.views.resource_permisions_handle_get
   geonode.security.views.resource_permissions_handle_post
   geonode.security.views.resource_permissions
   geonode.security.views.resource_geolimits
   geonode.security.views.invalidate_permissions_cache
   geonode.security.views.attributes_sats_refresh
   geonode.security.views.invalidate_tileddataset_cache
   geonode.security.views.set_bulk_permissions
   geonode.security.views.request_permissions
   geonode.security.views.send_email_consumer
   geonode.security.views.send_email_owner_on_view


Module Contents
---------------

.. py:data:: logger

.. py:function:: _perms_info(obj)

.. py:function:: _perms_info_json(obj)

.. py:function:: resource_permisions_handle_get(request, resource)

.. py:function:: resource_permissions_handle_post(request, resource)

.. py:function:: resource_permissions(request, resource_id)

.. py:function:: resource_geolimits(request, resource_id)

.. py:function:: invalidate_permissions_cache(request)

.. py:function:: attributes_sats_refresh(request)

.. py:function:: invalidate_tileddataset_cache(request)

.. py:function:: set_bulk_permissions(request)

.. py:function:: request_permissions(request)

   Request permission to download a resource.


.. py:function:: send_email_consumer(dataset_uuid, user_id)

.. py:function:: send_email_owner_on_view(owner, viewer, dataset_id, geonode_email='email@geo.node')

