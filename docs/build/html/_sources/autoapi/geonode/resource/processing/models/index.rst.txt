geonode.resource.processing.models
==================================

.. py:module:: geonode.resource.processing.models


Classes
-------

.. autoapisummary::

   geonode.resource.processing.models.AbstractProcessingTaskMeta
   geonode.resource.processing.models.AbstractProcessingTaskManager
   geonode.resource.processing.models.AbstractProcessingTask
   geonode.resource.processing.models.ProcessingWorkflow
   geonode.resource.processing.models.ProcessingWorkflowTasks
   geonode.resource.processing.models.SampleProcessingTask


Module Contents
---------------

.. py:class:: AbstractProcessingTaskMeta

   Bases: :py:obj:`abc.ABCMeta`, :py:obj:`type`\ (\ :py:obj:`PolymorphicModel`\ )


   Metaclass for defining Abstract Base Classes (ABCs).

   Use this metaclass to create an ABC.  An ABC can be subclassed
   directly, and then acts as a mix-in class.  You can also register
   unrelated concrete classes (even built-in classes) and unrelated
   ABCs as 'virtual subclasses' -- these and their descendants will
   be considered subclasses of the registering ABC by the built-in
   issubclass() function, but the registering ABC won't show up in
   their MRO (Method Resolution Order) nor will method
   implementations defined by the registering ABC be callable (not
   even via super()).


   .. py:method:: execute(resource)
      :abstractmethod:



.. py:class:: AbstractProcessingTaskManager

   Bases: :py:obj:`polymorphic.managers.PolymorphicManager`


   .. py:method:: get_real_instances()


.. py:class:: AbstractProcessingTask

   Bases: :py:obj:`polymorphic.models.PolymorphicModel`


   .. py:attribute:: objects


   .. py:attribute:: name


   .. py:attribute:: is_enabled


   .. py:method:: __str__()


.. py:class:: ProcessingWorkflow

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: name


   .. py:attribute:: processing_tasks


   .. py:attribute:: is_enabled


   .. py:method:: get_tasks()


   .. py:method:: __str__()


.. py:class:: ProcessingWorkflowTasks

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: workflow


   .. py:attribute:: task


   .. py:attribute:: order


   .. py:method:: __str__()


   .. py:class:: Meta

      .. py:attribute:: verbose_name_plural


      .. py:attribute:: ordering
         :value: ('order',)




.. py:class:: SampleProcessingTask

   Bases: :py:obj:`AbstractProcessingTask`


   .. py:method:: execute(resource)


