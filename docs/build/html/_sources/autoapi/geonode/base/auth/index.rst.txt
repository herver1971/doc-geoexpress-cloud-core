geonode.base.auth
=================

.. py:module:: geonode.base.auth


Attributes
----------

.. autoapisummary::

   geonode.base.auth.logger


Functions
---------

.. autoapisummary::

   geonode.base.auth.extract_user_from_headers
   geonode.base.auth.extract_headers
   geonode.base.auth.make_token_expiration
   geonode.base.auth.create_auth_token
   geonode.base.auth.extend_token
   geonode.base.auth.get_auth_token
   geonode.base.auth.get_auth_user
   geonode.base.auth.get_or_create_token
   geonode.base.auth.delete_old_tokens
   geonode.base.auth.get_token_from_auth_header
   geonode.base.auth.set_session_token
   geonode.base.auth.get_session_token
   geonode.base.auth.get_token_object_from_session
   geonode.base.auth.remove_session_token
   geonode.base.auth.basic_auth_authenticate_user
   geonode.base.auth.get_token_object
   geonode.base.auth.get_auth_user_from_token
   geonode.base.auth.token_header_authenticate_user
   geonode.base.auth.visitor_ip_address
   geonode.base.auth.is_ipaddress_in_whitelist


Module Contents
---------------

.. py:data:: logger

.. py:function:: extract_user_from_headers(request)

.. py:function:: extract_headers(request)

   Extracts headers from the Django request object

   :param request: The current django.http.HttpRequest object
   :return: a dictionary with OAuthLib needed headers


.. py:function:: make_token_expiration(seconds=86400)

.. py:function:: create_auth_token(user, client=settings.OAUTH2_DEFAULT_BACKEND_CLIENT_NAME)

.. py:function:: extend_token(token)

.. py:function:: get_auth_token(user, client=settings.OAUTH2_DEFAULT_BACKEND_CLIENT_NAME)

.. py:function:: get_auth_user(access_token, client=settings.OAUTH2_DEFAULT_BACKEND_CLIENT_NAME)

.. py:function:: get_or_create_token(user, client=settings.OAUTH2_DEFAULT_BACKEND_CLIENT_NAME)

.. py:function:: delete_old_tokens(user, client=settings.OAUTH2_DEFAULT_BACKEND_CLIENT_NAME)

.. py:function:: get_token_from_auth_header(auth_header, create_if_not_exists=False)

.. py:function:: set_session_token(session, token)

.. py:function:: get_session_token(session)

.. py:function:: get_token_object_from_session(session)

.. py:function:: remove_session_token(session)

.. py:function:: basic_auth_authenticate_user(auth_header: str)

   Function performing user authentication based on BasicAuth Authorization header

   :param auth_header: Authorization header of the request


.. py:function:: get_token_object(token)

.. py:function:: get_auth_user_from_token(token)

.. py:function:: token_header_authenticate_user(auth_header: str)

.. py:function:: visitor_ip_address(request)

.. py:function:: is_ipaddress_in_whitelist(visitor_ip, whitelist)

