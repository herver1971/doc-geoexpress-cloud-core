geonode.base.populate_test_data
===============================

.. py:module:: geonode.base.populate_test_data


Attributes
----------

.. autoapisummary::

   geonode.base.populate_test_data.logger
   geonode.base.populate_test_data.imgfile
   geonode.base.populate_test_data.f
   geonode.base.populate_test_data.dfile


Functions
---------

.. autoapisummary::

   geonode.base.populate_test_data.all_public
   geonode.base.populate_test_data.create_fixtures
   geonode.base.populate_test_data.create_models
   geonode.base.populate_test_data.remove_models
   geonode.base.populate_test_data.dump_models
   geonode.base.populate_test_data.create_single_dataset
   geonode.base.populate_test_data.create_single_map
   geonode.base.populate_test_data.create_single_doc
   geonode.base.populate_test_data.create_single_geoapp
   geonode.base.populate_test_data.add_keywords_to_resource


Module Contents
---------------

.. py:data:: logger

.. py:data:: imgfile

.. py:data:: f

.. py:data:: dfile

.. py:function:: all_public()

   Ensure all layers, maps and documents are publicly available


.. py:function:: create_fixtures()

.. py:function:: create_models(type=None, integration=False)

.. py:function:: remove_models(obj_ids, type=None, integration=False)

.. py:function:: dump_models(path=None)

.. py:function:: create_single_dataset(name, keywords=None, owner=None, group=None, **kwargs)

.. py:function:: create_single_map(name, owner=None, **kwargs)

.. py:function:: create_single_doc(name, owner=None, **kwargs)

.. py:function:: create_single_geoapp(name, resource_type='geostory', owner=None, **kwargs)

.. py:function:: add_keywords_to_resource(resource, keywords)

