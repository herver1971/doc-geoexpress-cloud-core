geonode.br.management.commands.utils.utils
==========================================

.. py:module:: geonode.br.management.commands.utils.utils


Attributes
----------

.. autoapisummary::

   geonode.br.management.commands.utils.utils.MEDIA_ROOT
   geonode.br.management.commands.utils.utils.STATIC_ROOT
   geonode.br.management.commands.utils.utils.STATICFILES_DIRS
   geonode.br.management.commands.utils.utils.TEMPLATE_DIRS
   geonode.br.management.commands.utils.utils.LOCALE_PATHS
   geonode.br.management.commands.utils.utils.EXTERNAL_ROOT
   geonode.br.management.commands.utils.utils.logger


Classes
-------

.. autoapisummary::

   geonode.br.management.commands.utils.utils.Config


Functions
---------

.. autoapisummary::

   geonode.br.management.commands.utils.utils.option
   geonode.br.management.commands.utils.utils.geoserver_option_list
   geonode.br.management.commands.utils.utils.get_db_conn
   geonode.br.management.commands.utils.utils.get_tables
   geonode.br.management.commands.utils.utils.truncate_tables
   geonode.br.management.commands.utils.utils.dump_db
   geonode.br.management.commands.utils.utils.restore_db
   geonode.br.management.commands.utils.utils.remove_existing_tables
   geonode.br.management.commands.utils.utils.confirm
   geonode.br.management.commands.utils.utils.md5_file_hash
   geonode.br.management.commands.utils.utils.ignore_time
   geonode.br.management.commands.utils.utils.glob2re
   geonode.br.management.commands.utils.utils.glob_filter
   geonode.br.management.commands.utils.utils.empty_folder
   geonode.br.management.commands.utils.utils.setup_logger


Module Contents
---------------

.. py:data:: MEDIA_ROOT
   :value: 'uploaded'


.. py:data:: STATIC_ROOT
   :value: 'static_root'


.. py:data:: STATICFILES_DIRS
   :value: 'static_dirs'


.. py:data:: TEMPLATE_DIRS
   :value: 'template_dirs'


.. py:data:: LOCALE_PATHS
   :value: 'locale_dirs'


.. py:data:: EXTERNAL_ROOT
   :value: 'external'


.. py:data:: logger

.. py:function:: option(parser)

.. py:function:: geoserver_option_list(parser)

.. py:class:: Config(options: dict)

   .. py:attribute:: settings_path


   .. py:attribute:: config_parser


.. py:function:: get_db_conn(db_name, db_user, db_port, db_host, db_passwd)

   Get db conn (GeoNode)


.. py:function:: get_tables(db_user, db_passwd, db_name, db_host='localhost', db_port=5432)

.. py:function:: truncate_tables(db_name, db_user, db_port, db_host, db_passwd)

   HARD Truncate all DB Tables


.. py:function:: dump_db(config, db_name, db_user, db_port, db_host, db_passwd, target_folder)

   Dump Full DB into target folder


.. py:function:: restore_db(config, db_name, db_user, db_port, db_host, db_passwd, source_folder, preserve_tables)

   Restore Full DB into target folder


.. py:function:: remove_existing_tables(db_name, db_user, db_port, db_host, db_passwd)

.. py:function:: confirm(prompt=None, resp=False)

   prompts for yes or no response from the user. Returns True for yes and
   False for no.

   'resp' should be set to the default value assumed by the caller when
   user simply types ENTER.

   >>> confirm(prompt='Create Directory?', resp=True)
   Create Directory? [y]|n:
   True
   >>> confirm(prompt='Create Directory?', resp=False)
   Create Directory? [n]|y:
   False
   >>> confirm(prompt='Create Directory?', resp=False)
   Create Directory? [n]|y: y
   True


.. py:function:: md5_file_hash(file_path)

   A method generating MD5 hash of the provided file.

   :param file_path: file's path with an extension, which will be opened for reading and generating md5 hash
   :return: hex representation of md5 hash


.. py:function:: ignore_time(cmp_operator, iso_date)

.. py:function:: glob2re(pat)

   Translate a shell PATTERN to a regular expression.

   There is no way to quote meta-characters.


.. py:function:: glob_filter(names, pat)

.. py:function:: empty_folder(folder)

.. py:function:: setup_logger()

