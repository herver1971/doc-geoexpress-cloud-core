geonode.people
==============

.. py:module:: geonode.people


Subpackages
-----------

.. toctree::
   :maxdepth: 1

   /autoapi/geonode/people/management/index
   /autoapi/geonode/people/socialaccount/index
   /autoapi/geonode/people/templatetags/index


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/geonode/people/adapters/index
   /autoapi/geonode/people/admin/index
   /autoapi/geonode/people/enumerations/index
   /autoapi/geonode/people/forms/index
   /autoapi/geonode/people/languages/index
   /autoapi/geonode/people/models/index
   /autoapi/geonode/people/password_validators/index
   /autoapi/geonode/people/profileextractors/index
   /autoapi/geonode/people/search_indexes/index
   /autoapi/geonode/people/signals/index
   /autoapi/geonode/people/test_adapters/index
   /autoapi/geonode/people/tests/index
   /autoapi/geonode/people/timezones/index
   /autoapi/geonode/people/urls/index
   /autoapi/geonode/people/utils/index
   /autoapi/geonode/people/views/index


Attributes
----------

.. autoapisummary::

   geonode.people.default_app_config


Classes
-------

.. autoapisummary::

   geonode.people.NotificationsAppConfigBase
   geonode.people.PeopleAppConfig
   geonode.people.Role
   geonode.people.Roles


Package Contents
----------------

.. py:class:: NotificationsAppConfigBase

   Bases: :py:obj:`django.apps.AppConfig`


   Base class for AppConfig notifications setup

   You should subclass it and provide list of notifications
   in NOTIFICATIONS attribute to automatically register to
   post_migrate signal.


   .. py:attribute:: NOTIFICATIONS


   .. py:method:: _get_logger()


   .. py:method:: _register_notifications(*args, **kwargs)


   .. py:method:: ready()


.. py:class:: PeopleAppConfig

   Bases: :py:obj:`geonode.notifications_helper.NotificationsAppConfigBase`


   Base class for AppConfig notifications setup

   You should subclass it and provide list of notifications
   in NOTIFICATIONS attribute to automatically register to
   post_migrate signal.


   .. py:attribute:: name
      :value: 'geonode.people'



   .. py:attribute:: NOTIFICATIONS


   .. py:method:: ready()


.. py:data:: default_app_config
   :value: 'geonode.people.PeopleAppConfig'


.. py:class:: Role(label, is_required, is_multivalue, is_toggled_in_metadata_editor)

   .. py:attribute:: label


   .. py:attribute:: is_required


   .. py:attribute:: is_multivalue


   .. py:attribute:: is_toggled_in_metadata_editor


   .. py:method:: __repr__()


.. py:class:: Roles

   Bases: :py:obj:`enum.Enum`


   Roles with their `label`, `is_required`, `is_multivalue`, `is_toggled_in_metadata_editor`


   .. py:attribute:: OWNER


   .. py:attribute:: METADATA_AUTHOR


   .. py:attribute:: PROCESSOR


   .. py:attribute:: PUBLISHER


   .. py:attribute:: CUSTODIAN


   .. py:attribute:: POC


   .. py:attribute:: DISTRIBUTOR


   .. py:attribute:: RESOURCE_USER


   .. py:attribute:: RESOURCE_PROVIDER


   .. py:attribute:: ORIGINATOR


   .. py:attribute:: PRINCIPAL_INVESTIGATOR


   .. py:property:: name
      The name of the Enum member.


   .. py:property:: label


   .. py:property:: is_required


   .. py:property:: is_multivalue


   .. py:property:: is_toggled_in_metadata_editor


   .. py:method:: __repr__()


   .. py:method:: get_required_ones()
      :classmethod:



   .. py:method:: get_multivalue_ones()
      :classmethod:



   .. py:method:: get_toggled_ones()
      :classmethod:



