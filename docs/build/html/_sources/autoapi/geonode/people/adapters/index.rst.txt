geonode.people.adapters
=======================

.. py:module:: geonode.people.adapters

.. autoapi-nested-parse::

   Custom account adapters for django-allauth.

   These are used in order to extend the default authorization provided by
   django-allauth.



Attributes
----------

.. autoapisummary::

   geonode.people.adapters.logger
   geonode.people.adapters.PROVIDER_ID
   geonode.people.adapters.ACCESS_TOKEN_URL
   geonode.people.adapters.AUTHORIZE_URL
   geonode.people.adapters.PROFILE_URL
   geonode.people.adapters.ID_TOKEN_ISSUER


Classes
-------

.. autoapisummary::

   geonode.people.adapters.LocalAccountAdapter
   geonode.people.adapters.SocialAccountAdapter
   geonode.people.adapters.GenericOpenIDConnectAdapter


Functions
---------

.. autoapisummary::

   geonode.people.adapters.get_data_extractor
   geonode.people.adapters.get_group_role_mapper
   geonode.people.adapters.update_profile
   geonode.people.adapters._site_allows_signup
   geonode.people.adapters._respond_inactive_user


Module Contents
---------------

.. py:data:: logger

.. py:function:: get_data_extractor(provider_id)

   Get the relevant profile extractor instance for the provider

   Retrieve the data extractor instance to use for getting profile
   information from social account providers.



.. py:function:: get_group_role_mapper(provider_id)

.. py:function:: update_profile(sociallogin)

   Update a people.models.Profile object with info from the sociallogin


.. py:class:: LocalAccountAdapter

   Bases: :py:obj:`allauth.account.adapter.DefaultAccountAdapter`, :py:obj:`invitations.adapters.BaseInvitationsAdapter`


   Customizations for local accounts

   Check `django-allauth's documentation`_ for more details on this class.

   .. _django-allauth's documentation:
      http://django-allauth.readthedocs.io/en/latest/advanced.html#creating-and-populating-user-instances



   .. py:method:: is_open_for_signup(request)


   .. py:method:: get_login_redirect_url(request)


   .. py:method:: populate_username(request, user)


   .. py:method:: send_invitation_email(email_template, email, context)


   .. py:method:: send_mail(template_prefix, email, context)


   .. py:method:: enhanced_invitation_context(context)


   .. py:method:: save_user(request, user, form, commit=True)


   .. py:method:: respond_user_inactive(request, user)


.. py:class:: SocialAccountAdapter

   Bases: :py:obj:`allauth.socialaccount.adapter.DefaultSocialAccountAdapter`


   Customizations for social accounts

   Check `django-allauth's documentation`_ for more details on this class.

   .. _django-allauth's documentation:
        http //django-allauth.readthedocs.io/en/latest/advanced.html#creating-and-populating-user-instances



   .. py:method:: is_open_for_signup(request, sociallogin)


   .. py:method:: populate_user(request, sociallogin, data)

      This method is called when a new sociallogin is created



   .. py:method:: save_user(request, sociallogin, form=None)


   .. py:method:: respond_user_inactive(request, user)


.. py:function:: _site_allows_signup(django_request)

.. py:function:: _respond_inactive_user(user)

.. py:data:: PROVIDER_ID

.. py:data:: ACCESS_TOKEN_URL

.. py:data:: AUTHORIZE_URL

.. py:data:: PROFILE_URL

.. py:data:: ID_TOKEN_ISSUER

.. py:class:: GenericOpenIDConnectAdapter

   Bases: :py:obj:`allauth.socialaccount.providers.oauth2.views.OAuth2Adapter`, :py:obj:`SocialAccountAdapter`


   Customizations for social accounts

   Check `django-allauth's documentation`_ for more details on this class.

   .. _django-allauth's documentation:
        http //django-allauth.readthedocs.io/en/latest/advanced.html#creating-and-populating-user-instances



   .. py:attribute:: provider_id


   .. py:attribute:: access_token_url


   .. py:attribute:: authorize_url


   .. py:attribute:: profile_url


   .. py:attribute:: id_token_issuer


   .. py:method:: complete_login(request, app, token, response, **kwargs)


   .. py:method:: save_user(request, sociallogin, form=None)


