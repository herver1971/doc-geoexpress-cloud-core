geonode.people.models
=====================

.. py:module:: geonode.people.models


Attributes
----------

.. autoapisummary::

   geonode.people.models.logger


Classes
-------

.. autoapisummary::

   geonode.people.models.ProfileUserManager
   geonode.people.models.Profile


Functions
---------

.. autoapisummary::

   geonode.people.models.get_anonymous_user_instance


Module Contents
---------------

.. py:data:: logger

.. py:class:: ProfileUserManager

   Bases: :py:obj:`django.contrib.auth.models.UserManager`


   .. py:method:: get_by_natural_key(username)


.. py:class:: Profile(*args, **kwargs)

   Bases: :py:obj:`django.contrib.auth.models.AbstractUser`


   Fully featured Geonode user


   .. py:attribute:: organization


   .. py:attribute:: profile


   .. py:attribute:: position


   .. py:attribute:: voice


   .. py:attribute:: fax


   .. py:attribute:: delivery


   .. py:attribute:: city


   .. py:attribute:: area


   .. py:attribute:: zipcode


   .. py:attribute:: country


   .. py:attribute:: keywords


   .. py:attribute:: language


   .. py:attribute:: timezone


   .. py:attribute:: _previous_active_state


   .. py:method:: get_absolute_url()


   .. py:method:: __str__()


   .. py:method:: class_name(value)
      :staticmethod:



   .. py:attribute:: objects


   .. py:attribute:: USERNAME_FIELD
      :value: 'username'



   .. py:method:: group_list_public()


   .. py:method:: group_list_all()


   .. py:method:: is_member_of_group(group_slug)

      Returns if the Profile belongs to a group of a given slug.



   .. py:method:: keyword_list()

      Returns a list of the Profile's keywords.



   .. py:property:: name_long


   .. py:property:: full_name_or_nick


   .. py:property:: first_name_or_nick


   .. py:property:: location


   .. py:property:: perms


   .. py:method:: save(*args, **kwargs)


   .. py:method:: delete(using=None, keep_parents=False)


   .. py:method:: _notify_account_activated()

      Notify user that its account has been activated by a staff member



   .. py:method:: send_mail(template_prefix, context)


.. py:function:: get_anonymous_user_instance(user_model)

