geonode.monitoring.collector
============================

.. py:module:: geonode.monitoring.collector


Attributes
----------

.. autoapisummary::

   geonode.monitoring.collector.log


Classes
-------

.. autoapisummary::

   geonode.monitoring.collector.CollectorAPI


Module Contents
---------------

.. py:data:: log

.. py:class:: CollectorAPI

   .. py:method:: _calculate_rate(metric_name, metric_label, current_value, valid_to)

      Find previous network metric value and calculate rate between them



   .. py:method:: _calculate_percent(metric_name, metric_label, current_value, valid_to)

      Find previous network metric value and calculate percent



   .. py:method:: process_host_geoserver(service, data, valid_from, valid_to)

      Generates mertic values for system-level measurements



   .. py:method:: process_host_geonode(service, data, valid_from, valid_to)

      Generates mertic values for system-level measurements



   .. py:method:: get_labels_for_metric(metric_name, resource=None)


   .. py:method:: get_resources_for_metric(metric_name)


   .. py:method:: get_metric_names()

      Returns list of tuples: (service type, list of metrics)



   .. py:method:: extract_resources(requests)


   .. py:method:: extract_event_type(requests)


   .. py:method:: extract_event_types(requests)


   .. py:method:: extract_special_event_types(requests)

      Return list of pairs (event_type, requests)
      that should be registered as one of aggregating event types: ows:all, other,



   .. py:method:: set_metric_values(metric_name, column_name, requests, service, **metric_values)


   .. py:method:: process(service, data, valid_from, valid_to, *args, **kwargs)


   .. py:method:: process_requests(service, requests, valid_from, valid_to)

      Processes request list for specific service, generate stats



   .. py:method:: set_error_values(requests, valid_from, valid_to, service=None, resource=None, event_type=None)


   .. py:method:: process_requests_batch(service, requests, valid_from, valid_to)

      Processes requests information into metric values



   .. py:method:: get_metrics_for(metric_name, valid_from=None, valid_to=None, interval=None, service=None, label=None, user=None, resource=None, event_type=None, service_type=None, group_by=None, resource_type=None)

      Returns metric data for given metric. Returned dataset contains list of periods and values in that periods



   .. py:method:: get_aggregate_function(column_name, metric_name, service=None)

      Returns string with metric value column name surrounded by aggregate function
      based on metric type (which tells how to interpret value - is it a counter,
      rate or something else).



   .. py:method:: get_metrics_data(metric_name, valid_from, valid_to, interval, service=None, label=None, user=None, resource=None, resource_type=None, event_type=None, service_type=None, group_by=None)

      Returns metric values for metric within given time span



   .. py:method:: aggregate_past_periods(metric_data_q=None, periods=None, **kwargs)

      Aggregate past metric data into longer periods




   .. py:method:: clear_old_data()


   .. py:method:: compose_notifications(ndata, when=None)


   .. py:method:: emit_notifications(for_timestamp=None)


   .. py:method:: send_mails(notification, emails, ndata, when=None)


   .. py:method:: get_last_usable_timestamp()


   .. py:method:: get_notifications(for_timestamp=None)


