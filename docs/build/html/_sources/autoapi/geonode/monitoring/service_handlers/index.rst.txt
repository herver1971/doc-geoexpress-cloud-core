geonode.monitoring.service_handlers
===================================

.. py:module:: geonode.monitoring.service_handlers


Attributes
----------

.. autoapisummary::

   geonode.monitoring.service_handlers.log
   geonode.monitoring.service_handlers.services
   geonode.monitoring.service_handlers.exposes


Classes
-------

.. autoapisummary::

   geonode.monitoring.service_handlers.BaseServiceExpose
   geonode.monitoring.service_handlers.HostGeoNodeServiceExpose
   geonode.monitoring.service_handlers.GeoNodeServiceExpose
   geonode.monitoring.service_handlers.BaseServiceHandler
   geonode.monitoring.service_handlers.GeoNodeService
   geonode.monitoring.service_handlers.GeoServerService
   geonode.monitoring.service_handlers.HostGeoServerService
   geonode.monitoring.service_handlers.HostGeoNodeService


Functions
---------

.. autoapisummary::

   geonode.monitoring.service_handlers.get_for_service
   geonode.monitoring.service_handlers.exposes_for_service


Module Contents
---------------

.. py:data:: log

.. py:class:: BaseServiceExpose(*args, **kwargs)

   .. py:attribute:: NAME
      :value: None



   .. py:attribute:: args


   .. py:attribute:: kwargs


   .. py:method:: setup()


   .. py:method:: expose()
      :abstractmethod:



   .. py:method:: get_name()
      :classmethod:



.. py:class:: HostGeoNodeServiceExpose(*args, **kwargs)

   Bases: :py:obj:`BaseServiceExpose`


   .. py:attribute:: NAME
      :value: 'hostgeonode'



   .. py:method:: expose(*args, **kwargs)


.. py:class:: GeoNodeServiceExpose(*args, **kwargs)

   Bases: :py:obj:`BaseServiceExpose`


   .. py:attribute:: NAME
      :value: 'geonode'



   .. py:method:: expose(*args, **kwargs)


.. py:class:: BaseServiceHandler(service, force_check=False)

   .. py:attribute:: utc


   .. py:attribute:: service


   .. py:attribute:: now


   .. py:attribute:: check_since


   .. py:attribute:: force_check


   .. py:method:: setup()


   .. py:method:: get_last_request()


   .. py:method:: get_last_request_timestamp()


   .. py:method:: collect(since=None, until=None, **kwargs)


   .. py:method:: _collect(since, until, *args, **kwargs)
      :abstractmethod:



   .. py:method:: handle_collected()
      :abstractmethod:



   .. py:method:: mark_as_checked()


   .. py:method:: get_name()
      :classmethod:



.. py:class:: GeoNodeService(service, force_check=False)

   Bases: :py:obj:`BaseServiceHandler`


   .. py:method:: _get_collected_set(since=None, until=None)


   .. py:method:: _collect(since=None, until=None, **kwargs)


   .. py:method:: handle_collected(requests, *args, **kwargs)


.. py:class:: GeoServerService(service, force_check=False)

   Bases: :py:obj:`BaseServiceHandler`


   .. py:method:: setup()


   .. py:method:: _collect(since, until, format=None, **kwargs)


   .. py:method:: handle_collected(requests)


.. py:class:: HostGeoServerService(service, force_check=False)

   Bases: :py:obj:`BaseServiceHandler`


   .. py:attribute:: PATH
      :value: '/rest/about/system-status.json'



   .. py:method:: _collect(*args, **kwargs)


   .. py:method:: handle_collected(data, *args, **kwargs)


.. py:class:: HostGeoNodeService(service, force_check=False)

   Bases: :py:obj:`BaseServiceHandler`


   .. py:method:: _collect(since, until, *args, **kwargs)


   .. py:method:: handle_collected(data, *args, **kwargs)


.. py:data:: services

.. py:function:: get_for_service(sname)

.. py:data:: exposes

.. py:function:: exposes_for_service(sname)

