geonode.monitoring.models
=========================

.. py:module:: geonode.monitoring.models


Attributes
----------

.. autoapisummary::

   geonode.monitoring.models.log
   geonode.monitoring.models.GEOIP_DB


Classes
-------

.. autoapisummary::

   geonode.monitoring.models.Host
   geonode.monitoring.models.ServiceType
   geonode.monitoring.models.Service
   geonode.monitoring.models.MonitoredResource
   geonode.monitoring.models.Metric
   geonode.monitoring.models.ServiceTypeMetric
   geonode.monitoring.models.EventType
   geonode.monitoring.models.RequestEvent
   geonode.monitoring.models.ExceptionEvent
   geonode.monitoring.models.MetricLabel
   geonode.monitoring.models.MetricValue
   geonode.monitoring.models.NotificationCheck
   geonode.monitoring.models.NotificationReceiver
   geonode.monitoring.models.NotificationMetricDefinition
   geonode.monitoring.models.MetricNotificationCheck
   geonode.monitoring.models.BuiltIns


Functions
---------

.. autoapisummary::

   geonode.monitoring.models.get_geoip
   geonode.monitoring.models.populate
   geonode.monitoring.models.do_autoconfigure
   geonode.monitoring.models.do_reload


Module Contents
---------------

.. py:data:: log

.. py:data:: GEOIP_DB
   :value: None


.. py:function:: get_geoip()

.. py:class:: Host

   Bases: :py:obj:`django.db.models.Model`


   Describes one physical instance


   .. py:attribute:: name


   .. py:attribute:: ip


   .. py:attribute:: active


   .. py:method:: __str__()


.. py:class:: ServiceType

   Bases: :py:obj:`django.db.models.Model`


   Service Type list


   .. py:attribute:: TYPE_GEONODE
      :value: 'geonode'



   .. py:attribute:: TYPE_GEOSERVER
      :value: 'geoserver'



   .. py:attribute:: TYPE_HOST_GN
      :value: 'hostgeonode'



   .. py:attribute:: TYPE_HOST_GS
      :value: 'hostgeoserver'



   .. py:attribute:: TYPES


   .. py:attribute:: name


   .. py:method:: __str__()


   .. py:property:: is_system_monitor


.. py:class:: Service

   Bases: :py:obj:`django.db.models.Model`


   Service is a entity describing deployed processes.


   .. py:attribute:: name


   .. py:attribute:: host


   .. py:attribute:: check_interval


   .. py:attribute:: last_check


   .. py:attribute:: service_type


   .. py:attribute:: active


   .. py:attribute:: notes


   .. py:attribute:: url


   .. py:method:: __str__()


   .. py:method:: get_metrics()


   .. py:property:: is_hostgeonode


   .. py:property:: is_hostgeoserver


   .. py:property:: is_system_monitor


.. py:class:: MonitoredResource

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: TYPE_EMPTY
      :value: ''



   .. py:attribute:: TYPE_LAYER
      :value: 'dataset'



   .. py:attribute:: TYPE_MAP
      :value: 'map'



   .. py:attribute:: TYPE_RESOURCE_BASE
      :value: 'resource_base'



   .. py:attribute:: TYPE_DOCUMENT
      :value: 'document'



   .. py:attribute:: TYPE_STYLE
      :value: 'style'



   .. py:attribute:: TYPE_ADMIN
      :value: 'admin'



   .. py:attribute:: TYPE_URL
      :value: 'url'



   .. py:attribute:: TYPE_OTHER
      :value: 'other'



   .. py:attribute:: _TYPES


   .. py:attribute:: TYPES


   .. py:attribute:: name


   .. py:attribute:: type


   .. py:attribute:: resource_id


   .. py:class:: Meta

      .. py:attribute:: unique_together
         :value: (('name', 'type'),)




   .. py:method:: __str__()


   .. py:method:: get(resource_type, resource_name, or_create=False)
      :classmethod:



.. py:class:: Metric

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: TYPE_RATE
      :value: 'rate'



   .. py:attribute:: TYPE_COUNT
      :value: 'count'



   .. py:attribute:: TYPE_VALUE
      :value: 'value'



   .. py:attribute:: TYPE_VALUE_NUMERIC
      :value: 'value_numeric'



   .. py:attribute:: TYPES


   .. py:attribute:: AGGREGATE_MAP


   .. py:attribute:: AGGREGATE_DJANGO_MAP


   .. py:attribute:: UNIT_BYTES
      :value: 'B'



   .. py:attribute:: UNIT_KILOBYTES
      :value: 'KB'



   .. py:attribute:: UNIT_MEGABYTES
      :value: 'MB'



   .. py:attribute:: UNIT_GIGABYTES
      :value: 'GB'



   .. py:attribute:: UNIT_BPS
      :value: 'B/s'



   .. py:attribute:: UNIT_MBPS
      :value: 'MB/s'



   .. py:attribute:: UNIT_KBPS
      :value: 'KB/s'



   .. py:attribute:: UNIT_GBPS
      :value: 'GB/s'



   .. py:attribute:: UNIT_SECONDS
      :value: 's'



   .. py:attribute:: UNIT_COUNT
      :value: 'Count'



   .. py:attribute:: UNIT_RATE
      :value: 'Rate'



   .. py:attribute:: UNIT_PERCENTAGE
      :value: '%'



   .. py:attribute:: UNITS


   .. py:attribute:: name


   .. py:attribute:: description


   .. py:attribute:: type


   .. py:attribute:: unit


   .. py:method:: get_aggregate_field()


   .. py:method:: get_aggregate_name()


   .. py:method:: __unicode__()


   .. py:property:: is_rate


   .. py:property:: is_count


   .. py:property:: is_value_numeric


   .. py:property:: is_value


   .. py:method:: get_for(name, service=None)
      :classmethod:



.. py:class:: ServiceTypeMetric

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: service_type


   .. py:attribute:: metric


   .. py:method:: __str__()


.. py:class:: EventType

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: _ows_types


   .. py:attribute:: EVENT_DOWNLOAD
      :value: 'download'



   .. py:attribute:: EVENT_CREATE
      :value: 'create'



   .. py:attribute:: EVENT_CHANGE
      :value: 'change'



   .. py:attribute:: EVENT_CHANGE_METADATA
      :value: 'change_metadata'



   .. py:attribute:: EVENT_REMOVE
      :value: 'remove'



   .. py:attribute:: EVENT_VIEW
      :value: 'view'



   .. py:attribute:: EVENT_VIEW_METADATA
      :value: 'view_metadata'



   .. py:attribute:: EVENT_PUBLISH
      :value: 'publish'



   .. py:attribute:: EVENT_UPLOAD
      :value: 'upload'



   .. py:attribute:: EVENT_GEOSERVER
      :value: 'geoserver'



   .. py:attribute:: EVENT_OWS
      :value: 'OWS:ALL'



   .. py:attribute:: EVENT_OTHER
      :value: 'other'



   .. py:attribute:: EVENT_ALL
      :value: 'all'



   .. py:attribute:: EVENT_TYPES


   .. py:attribute:: name


   .. py:method:: __str__()


   .. py:method:: get(service_name=None)
      :classmethod:



   .. py:property:: is_all


   .. py:property:: is_other


   .. py:property:: is_ows


   .. py:property:: is_download


   .. py:property:: is_view


.. py:class:: RequestEvent

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: _methods


   .. py:attribute:: METHODS


   .. py:attribute:: created


   .. py:attribute:: received


   .. py:attribute:: service


   .. py:attribute:: event_type


   .. py:attribute:: host


   .. py:attribute:: request_path


   .. py:attribute:: resources


   .. py:attribute:: request_method


   .. py:attribute:: response_status


   .. py:attribute:: response_size


   .. py:attribute:: response_time


   .. py:attribute:: response_type


   .. py:attribute:: user_agent


   .. py:attribute:: user_agent_family


   .. py:attribute:: client_ip


   .. py:attribute:: client_lat


   .. py:attribute:: client_lon


   .. py:attribute:: client_country


   .. py:attribute:: client_region


   .. py:attribute:: client_city


   .. py:attribute:: custom_id


   .. py:attribute:: user_identifier


   .. py:attribute:: user_username


   .. py:method:: _get_resources(type_name, resources_list)
      :classmethod:



   .. py:method:: _get_or_create_resources(res_name, res_type, res_id)
      :classmethod:



   .. py:method:: _get_geonode_resources(request)
      :classmethod:


      Return serialized resources affected by request



   .. py:method:: _get_event_type(request, default_event_type='view')
      :classmethod:


      Returns event type based on events



   .. py:method:: _get_ua_family(ua)
      :staticmethod:



   .. py:method:: _get_user_agent(ua)
      :classmethod:



   .. py:method:: _get_user_consent(request)
      :classmethod:



   .. py:method:: _get_user_location(request_ip)
      :classmethod:



   .. py:method:: _get_user_data_gn(request)
      :classmethod:



   .. py:method:: _get_user_data_gs(request)
      :classmethod:



   .. py:method:: from_geonode(service, request, response)
      :classmethod:



   .. py:method:: from_geoserver(service, request_data, received=None)
      :classmethod:


      Writes RequestEvent for data from audit log in GS



.. py:class:: ExceptionEvent

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: created


   .. py:attribute:: received


   .. py:attribute:: service


   .. py:attribute:: error_type


   .. py:attribute:: error_message


   .. py:attribute:: error_data


   .. py:attribute:: request


   .. py:method:: add_error(from_service, error_type, stack_trace, request=None, created=None, message=None)
      :classmethod:



   .. py:property:: url


   .. py:property:: service_data


   .. py:method:: expose()


.. py:class:: MetricLabel

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: name


   .. py:attribute:: user


   .. py:method:: __unicode__()


.. py:class:: MetricValue

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: valid_from


   .. py:attribute:: valid_to


   .. py:attribute:: service_metric


   .. py:attribute:: service


   .. py:attribute:: event_type


   .. py:attribute:: resource


   .. py:attribute:: label


   .. py:attribute:: value


   .. py:attribute:: value_num


   .. py:attribute:: value_raw


   .. py:attribute:: samples_count


   .. py:attribute:: data


   .. py:class:: Meta

      .. py:attribute:: unique_together
         :value: ('valid_from', 'valid_to', 'service', 'service_metric', 'resource', 'label', 'event_type')




   .. py:method:: __str__()


   .. py:method:: add(metric, valid_from, valid_to, service, label, value_raw=None, resource=None, value=None, value_num=None, data=None, event_type=None, samples_count=None)
      :classmethod:


      Create new MetricValue shortcut



   .. py:method:: get_for(metric, service=None, valid_on=None, resource=None, label=None, event_type=None)
      :classmethod:



.. py:class:: NotificationCheck

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: GRACE_PERIOD_1M


   .. py:attribute:: GRACE_PERIOD_5M


   .. py:attribute:: GRACE_PERIOD_10M


   .. py:attribute:: GRACE_PERIOD_30M


   .. py:attribute:: GRACE_PERIOD_1H


   .. py:attribute:: GRACE_PERIODS


   .. py:attribute:: SEVERITY_WARNING
      :value: 'warning'



   .. py:attribute:: SEVERITY_ERROR
      :value: 'error'



   .. py:attribute:: SEVERITY_FATAL
      :value: 'fatal'



   .. py:attribute:: SEVERITIES


   .. py:attribute:: name


   .. py:attribute:: description


   .. py:attribute:: user_threshold


   .. py:attribute:: metrics


   .. py:attribute:: last_send


   .. py:attribute:: grace_period


   .. py:attribute:: severity


   .. py:attribute:: active


   .. py:method:: __str__()


   .. py:property:: notification_subject


   .. py:property:: is_warning


   .. py:property:: is_error


   .. py:property:: is_fatal


   .. py:property:: can_send


   .. py:method:: mark_send()


   .. py:property:: url


   .. py:method:: get_users()


   .. py:method:: get_emails()


   .. py:property:: emails


   .. py:method:: check_notifications(for_timestamp=None)


   .. py:method:: check_for(for_timestamp=None, active=None)
      :classmethod:



   .. py:method:: get_steps(min_, max_, thresholds)
      :classmethod:



   .. py:method:: create(name, description, user_threshold, severity=None)
      :classmethod:



   .. py:method:: get_user_threshold(notification_def)


   .. py:method:: get_user_form(*args_, **kwargs_)

      Return form to validate metric thresholds input from user.



   .. py:method:: process_user_form(data, is_json=False)

      Process form data from user and create Notifica



   .. py:method:: get_definition_for(def_name)


.. py:class:: NotificationReceiver

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: notification_check


   .. py:attribute:: user


   .. py:attribute:: email


   .. py:method:: save(*args, **kwargs)


.. py:class:: NotificationMetricDefinition

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: FIELD_OPTION_MIN_VALUE
      :value: 'min_value'



   .. py:attribute:: FIELD_OPTION_MAX_VALUE
      :value: 'max_value'



   .. py:attribute:: FIELD_OPTION_MAX_TIMEOUT
      :value: 'max_timeout'



   .. py:attribute:: FIELD_OPTION_CHOICES


   .. py:attribute:: notification_check


   .. py:attribute:: metric


   .. py:attribute:: use_service


   .. py:attribute:: use_resource


   .. py:attribute:: use_label


   .. py:attribute:: use_event_type


   .. py:attribute:: field_option


   .. py:attribute:: description


   .. py:attribute:: min_value


   .. py:attribute:: max_value


   .. py:attribute:: steps


   .. py:property:: unit


   .. py:method:: is_min_val()


   .. py:method:: is_max_val()


   .. py:method:: is_max_timeout()


   .. py:property:: steps_calculated


   .. py:property:: is_enabled


   .. py:property:: current_value


   .. py:method:: get_fields()


   .. py:property:: field_name


   .. py:method:: populate_min_max()


.. py:class:: MetricNotificationCheck

   Bases: :py:obj:`django.db.models.Model`


   .. py:attribute:: notification_check


   .. py:attribute:: metric


   .. py:attribute:: service


   .. py:attribute:: resource


   .. py:attribute:: label


   .. py:attribute:: event_type


   .. py:attribute:: min_value


   .. py:attribute:: max_value


   .. py:attribute:: max_timeout


   .. py:attribute:: active


   .. py:attribute:: definition


   .. py:method:: __str__()


   .. py:property:: field_option


   .. py:exception:: MetricValueError(metric, check, message, offending_value, threshold_value, description)

      Bases: :py:obj:`ValueError`


      Inappropriate argument value (of correct type).


      .. py:attribute:: metric


      .. py:attribute:: check


      .. py:attribute:: message


      .. py:attribute:: name


      .. py:attribute:: offending_value


      .. py:attribute:: threshold_value


      .. py:attribute:: severity


      .. py:attribute:: check_url


      .. py:attribute:: check_id


      .. py:attribute:: spotted_at


      .. py:attribute:: description


      .. py:attribute:: valid_from


      .. py:attribute:: valid_to


      .. py:method:: __str__()

         Return str(self).




   .. py:method:: check_value(metric, valid_on)

      Check specific metric if it's faulty or not.



   .. py:method:: check_metric(for_timestamp=None)


.. py:class:: BuiltIns

   .. py:attribute:: service_types


   .. py:attribute:: host_service_types


   .. py:attribute:: metrics_rate
      :value: ('response.time', 'response.size')



   .. py:attribute:: geonode_metrics
      :value: ('request', 'request.count', 'request.users', 'request.ip', 'request.ua', 'request.path',...



   .. py:attribute:: host_metrics
      :value: ('load.1m', 'load.5m', 'load.15m', 'mem.free', 'mem.usage', 'mem.usage.percent', 'mem.buffers',...



   .. py:attribute:: rates
      :value: ('response.time', 'response.size', 'network.in.rate', 'network.out.rate', 'load.1m', 'load.5m',...



   .. py:attribute:: values
      :value: ('request.ip', 'request.ua', 'request.ua.family', 'request.path', 'request.method',...



   .. py:attribute:: values_numeric
      :value: ('storage.total', 'storage.used', 'storage.free', 'mem.free', 'mem.usage', 'mem.buffers', 'mem.all')



   .. py:attribute:: counters
      :value: ('request.count', 'network.in', 'network.out', 'response.error.count', 'uptime')



   .. py:attribute:: unit_seconds
      :value: ('response.time', 'uptime', 'cpu.usage')



   .. py:attribute:: unit_bytes
      :value: ('response.size', 'network.in', 'network.out', 'mem.free', 'mem.usage', 'mem.buffers', 'mem.all')



   .. py:attribute:: unit_bps
      :value: ('network.in.rate', 'network.out.rate')



   .. py:attribute:: unit_rate
      :value: ('cpu.usage.rate', 'load.1m', 'load.5m', 'load.15m')



   .. py:attribute:: unit_percentage
      :value: ('cpu.usage.percent', 'mem.usage.percent')



   .. py:attribute:: descriptions


.. py:function:: populate()

.. py:function:: do_autoconfigure()

   Create configuration from GeoNode's settings:

   - Extract all hosts

   - Create GeoNode instances

     - Create host-GeoNode instances (prefer this instead of GeoServer)

   - Create GeoServer instances

     - Create host-GeoServer instances if needed


.. py:function:: do_reload()

   This will reload uwsgi if it's available


