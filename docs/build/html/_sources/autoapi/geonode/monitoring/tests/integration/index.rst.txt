geonode.monitoring.tests.integration
====================================

.. py:module:: geonode.monitoring.tests.integration


Attributes
----------

.. autoapisummary::

   geonode.monitoring.tests.integration.GEONODE_USER
   geonode.monitoring.tests.integration.GEONODE_PASSWD
   geonode.monitoring.tests.integration.GEONODE_URL
   geonode.monitoring.tests.integration.GEOSERVER_URL
   geonode.monitoring.tests.integration.logger
   geonode.monitoring.tests.integration.res_dir
   geonode.monitoring.tests.integration.req_err_path
   geonode.monitoring.tests.integration.req_path
   geonode.monitoring.tests.integration.req_err_xml
   geonode.monitoring.tests.integration.req_xml
   geonode.monitoring.tests.integration.req_big
   geonode.monitoring.tests.integration.req_err_big


Classes
-------

.. autoapisummary::

   geonode.monitoring.tests.integration.TestClient
   geonode.monitoring.tests.integration.MonitoringTestBase
   geonode.monitoring.tests.integration.RequestsTestCase
   geonode.monitoring.tests.integration.MonitoringUtilsTestCase
   geonode.monitoring.tests.integration.MonitoringChecksTestCase
   geonode.monitoring.tests.integration.AutoConfigTestCase
   geonode.monitoring.tests.integration.MonitoringAnalyticsTestCase


Module Contents
---------------

.. py:data:: GEONODE_USER
   :value: 'admin'


.. py:data:: GEONODE_PASSWD
   :value: 'admin'


.. py:data:: GEONODE_URL

.. py:data:: GEOSERVER_URL

.. py:data:: logger

.. py:data:: res_dir

.. py:data:: req_err_path

.. py:data:: req_path

.. py:data:: req_err_xml

.. py:data:: req_xml

.. py:data:: req_big

.. py:data:: req_err_big

.. py:class:: TestClient

   Bases: :py:obj:`django.test.client.Client`


   .. py:method:: _base_environ(**request)

      The base environment for a request.



   .. py:property:: session


   .. py:method:: login_user(user)

      Login as specified user, does not depend on auth backend (hopefully)

      This is based on Client.login() with a small hack that does not
      require the call to authenticate()



.. py:class:: MonitoringTestBase

   Bases: :py:obj:`geonode.tests.base.GeoNodeLiveTestSupport`


   .. py:attribute:: type
      :value: 'dataset'



   .. py:attribute:: fixtures
      :value: ['initial_data.json', 'group_test_data.json', 'default_oauth_apps.json', 'test_thesaurus.json']



   .. py:method:: setUpClass()
      :classmethod:



   .. py:method:: tearDownClass()
      :classmethod:



   .. py:method:: setUp()


.. py:class:: RequestsTestCase

   Bases: :py:obj:`MonitoringTestBase`


   .. py:method:: setUp()


   .. py:method:: test_gs_req()

      Test if we can parse geoserver requests



   .. py:method:: test_gs_err_req()

      Test if we can parse geoserver requests



   .. py:method:: test_gn_request()

      Test if we have geonode requests logged



   .. py:method:: test_gn_error()

      Test if we get geonode errors logged



   .. py:method:: test_service_handlers()

      Test if we can calculate metrics



   .. py:method:: test_collect_metrics_command()

      Test that collect metrics command is executed sequentially



.. py:class:: MonitoringUtilsTestCase

   Bases: :py:obj:`MonitoringTestBase`


   .. py:method:: setUp()


   .. py:method:: test_time_periods()

      Test if we can use time periods



.. py:class:: MonitoringChecksTestCase

   Bases: :py:obj:`MonitoringTestBase`


   .. py:attribute:: reserved_fields
      :value: ('emails', 'severity', 'active', 'grace_period')



   .. py:method:: setUp()


   .. py:method:: test_monitoring_checks()


   .. py:method:: test_notifications_views()


   .. py:method:: test_notifications_edit_views()


   .. py:method:: test_notifications_api()


.. py:class:: AutoConfigTestCase

   Bases: :py:obj:`MonitoringTestBase`


   .. py:attribute:: OGC_GS_1
      :value: 'http://localhost/geoserver123/'



   .. py:attribute:: OGC_GS_2
      :value: 'http://google.com/test/'



   .. py:attribute:: OGC_SERVER


   .. py:method:: setUp()


   .. py:method:: test_autoconfig()


.. py:class:: MonitoringAnalyticsTestCase

   Bases: :py:obj:`MonitoringTestBase`


   .. py:method:: setUp()


   .. py:method:: test_dataset_view_endpoints()


   .. py:method:: test_dataset_upload_endpoints()


   .. py:method:: test_dataset_view_metadata_endpoints()


   .. py:method:: test_dataset_change_metadata_endpoints()


   .. py:method:: test_dataset_download_endpoints()


   .. py:method:: test_map_create_endpoints()


   .. py:method:: test_map_change_endpoints()


   .. py:method:: test_document_upload_endpoints()


   .. py:method:: test_document_view_metadata_endpoints()


   .. py:method:: test_document_change_metadata_endpoints()


   .. py:method:: test_document_download_endpoints()


   .. py:method:: test_url_view_endpoints()


   .. py:method:: test_resources_endpoint()


   .. py:method:: test_resource_types_endpoint()


   .. py:method:: test_users_count_for_resource_endpoint()


   .. py:method:: test_resources_count_endpoint()


   .. py:method:: test_event_types_endpoint()


   .. py:method:: test_ows_service_enpoints()


   .. py:method:: test_non_ows_events_enpoints()


   .. py:method:: test_event_type_on_label_endpoint()


   .. py:method:: test_event_type_on_user_endpoint()


   .. py:method:: test_unique_visitors_count_endpoints()


   .. py:method:: test_anonymous_sessions_count_endpoints()


   .. py:method:: test_unique_visitors_list_endpoints()


   .. py:method:: test_hostgeonode_cpu_endpoints()


   .. py:method:: test_hostgeoserver_cpu_endpoints()


   .. py:method:: test_hostgeonode_mem_endpoints()


   .. py:method:: test_hostgeoserver_mem_endpoints()


   .. py:method:: test_uptime_endpoints()


   .. py:method:: test_hits_for_event_type_endpoint()


   .. py:method:: test_countries_endpoint()


