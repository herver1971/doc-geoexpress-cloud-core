geonode.geoserver.acl.gsauth_client.api.authorization_api
=========================================================

.. py:module:: geonode.geoserver.acl.gsauth_client.api.authorization_api

.. autoapi-nested-parse::

   GeoServer ACL

   GeoServer Access Control List API  # noqa: E501

   The version of the OpenAPI document: 1.0.0
   Generated by: https://openapi-generator.tech



Classes
-------

.. autoapisummary::

   geonode.geoserver.acl.gsauth_client.api.authorization_api.AuthorizationApi


Module Contents
---------------

.. py:class:: AuthorizationApi(api_client=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: api_client


   .. py:method:: get_access_info(access_request, **kwargs)

      get_access_info  # noqa: E501

      Computes the grant access info for the given request  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_access_info(access_request, async_req=True)
      >>> result = thread.get()

      :param access_request: (required)
      :type access_request: AccessRequest
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: AccessInfo



   .. py:method:: get_access_info_with_http_info(access_request, **kwargs)

      get_access_info  # noqa: E501

      Computes the grant access info for the given request  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_access_info_with_http_info(access_request, async_req=True)
      >>> result = thread.get()

      :param access_request: (required)
      :type access_request: AccessRequest
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(AccessInfo, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: get_admin_authorization(admin_access_request, **kwargs)

      get_admin_authorization  # noqa: E501

      Computes info about admin authorization on a given workspace. Returned AccessInfo will always be ALLOW, with the computed adminRights.  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_admin_authorization(admin_access_request, async_req=True)
      >>> result = thread.get()

      :param admin_access_request: (required)
      :type admin_access_request: AdminAccessRequest
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: AdminAccessInfo



   .. py:method:: get_admin_authorization_with_http_info(admin_access_request, **kwargs)

      get_admin_authorization  # noqa: E501

      Computes info about admin authorization on a given workspace. Returned AccessInfo will always be ALLOW, with the computed adminRights.  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_admin_authorization_with_http_info(admin_access_request, async_req=True)
      >>> result = thread.get()

      :param admin_access_request: (required)
      :type admin_access_request: AdminAccessRequest
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(AdminAccessInfo, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: get_matching_rules(access_request, **kwargs)

      get_matching_rules  # noqa: E501

      Obtains the plain list of matching rules that are applied to the given AccessRequest when computing the AccessInfo  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_matching_rules(access_request, async_req=True)
      >>> result = thread.get()

      :param access_request: (required)
      :type access_request: AccessRequest
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: list[Rule]



   .. py:method:: get_matching_rules_with_http_info(access_request, **kwargs)

      get_matching_rules  # noqa: E501

      Obtains the plain list of matching rules that are applied to the given AccessRequest when computing the AccessInfo  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_matching_rules_with_http_info(access_request, async_req=True)
      >>> result = thread.get()

      :param access_request: (required)
      :type access_request: AccessRequest
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(list[Rule], status_code(int), headers(HTTPHeaderDict))



