geonode.geoserver.acl.gsauth_client.api_client
==============================================

.. py:module:: geonode.geoserver.acl.gsauth_client.api_client

.. autoapi-nested-parse::

   GeoServer ACL

   GeoServer Access Control List API  # noqa: E501

   The version of the OpenAPI document: 1.0.0
   Generated by: https://openapi-generator.tech



Classes
-------

.. autoapisummary::

   geonode.geoserver.acl.gsauth_client.api_client.ApiClient


Module Contents
---------------

.. py:class:: ApiClient(configuration=None, header_name=None, header_value=None, cookie=None, pool_threads=1)

   Bases: :py:obj:`object`


   Generic API client for OpenAPI client library builds.

   OpenAPI generic API client. This client handles the client-
   server communication, and is invariant across implementations. Specifics of
   the methods and models for each application are generated from the OpenAPI
   templates.

   .. note::
       This class is auto generated by OpenAPI Generator.
       Ref: https://openapi-generator.tech
       Do not edit the class manually.

   :param configuration: .Configuration object for this client
   :param header_name: a header to pass when making calls to the API.
   :param header_value: a header value to pass when making calls to
       the API.
   :param cookie: a cookie to include in the header when making calls
       to the API
   :param pool_threads: The number of threads to use for async requests
       to the API. More threads means more concurrent API requests.


   .. py:attribute:: PRIMITIVE_TYPES


   .. py:attribute:: NATIVE_TYPES_MAPPING


   .. py:attribute:: _pool
      :value: None



   .. py:attribute:: configuration


   .. py:attribute:: pool_threads


   .. py:attribute:: rest_client


   .. py:attribute:: default_headers


   .. py:attribute:: cookie


   .. py:property:: user_agent
      User agent for this API client


   .. py:attribute:: client_side_validation


   .. py:method:: __enter__()


   .. py:method:: __exit__(exc_type, exc_value, traceback)


   .. py:method:: close()


   .. py:property:: pool
      Create thread pool on first request
      avoids instantiating unused threadpool for blocking clients.


   .. py:method:: set_default_header(header_name, header_value)


   .. py:method:: __call_api(resource_path, method, path_params=None, query_params=None, header_params=None, body=None, post_params=None, files=None, response_types_map=None, auth_settings=None, _return_http_data_only=None, collection_formats=None, _preload_content=True, _request_timeout=None, _host=None, _request_auth=None)


   .. py:method:: sanitize_for_serialization(obj)

      Builds a JSON POST object.

      If obj is None, return None.
      If obj is str, int, long, float, bool, return directly.
      If obj is datetime.datetime, datetime.date
          convert to string in iso8601 format.
      If obj is list, sanitize each element in the list.
      If obj is dict, return the dict.
      If obj is OpenAPI model, return the properties dict.

      :param obj: The data to serialize.
      :return: The serialized form of data.



   .. py:method:: deserialize(response, response_type)

      Deserializes response into an object.

      :param response: RESTResponse object to be deserialized.
      :param response_type: class literal for
          deserialized object, or string of class name.

      :return: deserialized object.



   .. py:method:: __deserialize(data, klass)

      Deserializes dict, list, str into an object.

      :param data: dict, list or str.
      :param klass: class literal, or string of class name.

      :return: object.



   .. py:method:: call_api(resource_path, method, path_params=None, query_params=None, header_params=None, body=None, post_params=None, files=None, response_types_map=None, auth_settings=None, async_req=None, _return_http_data_only=None, collection_formats=None, _preload_content=True, _request_timeout=None, _host=None, _request_auth=None)

      Makes the HTTP request (synchronous) and returns deserialized data.

      To make an async_req request, set the async_req parameter.

      :param resource_path: Path to method endpoint.
      :param method: Method to call.
      :param path_params: Path parameters in the url.
      :param query_params: Query parameters in the url.
      :param header_params: Header parameters to be
          placed in the request header.
      :param body: Request body.
      :param post_params dict: Request post form parameters,
          for `application/x-www-form-urlencoded`, `multipart/form-data`.
      :param auth_settings list: Auth Settings names for the request.
      :param response: Response data type.
      :param files dict: key -> filename, value -> filepath,
          for `multipart/form-data`.
      :param async_req bool: execute request asynchronously
      :param _return_http_data_only: response data without head status code
                                     and headers
      :param collection_formats: dict of collection formats for path, query,
          header, and post parameters.
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_token: dict, optional
      :return:
          If async_req parameter is True,
          the request will be called asynchronously.
          The method will return the request thread.
          If parameter async_req is False or missing,
          then the method will return the response directly.



   .. py:method:: request(method, url, query_params=None, headers=None, post_params=None, body=None, _preload_content=True, _request_timeout=None)

      Makes the HTTP request using RESTClient.



   .. py:method:: parameters_to_tuples(params, collection_formats)

      Get parameters as list of tuples, formatting collections.

      :param params: Parameters as dict or list of two-tuples
      :param dict collection_formats: Parameter collection formats
      :return: Parameters as list of tuples, collections formatted



   .. py:method:: files_parameters(files=None)

      Builds form parameters.

      :param files: File parameters.
      :return: Form parameters with files.



   .. py:method:: select_header_accept(accepts)

      Returns `Accept` based on an array of accepts provided.

      :param accepts: List of headers.
      :return: Accept (e.g. application/json).



   .. py:method:: select_header_content_type(content_types, method=None, body=None)

      Returns `Content-Type` based on an array of content_types provided.

      :param content_types: List of content-types.
      :param method: http method (e.g. POST, PATCH).
      :param body: http body to send.
      :return: Content-Type (e.g. application/json).



   .. py:method:: update_params_for_auth(headers, queries, auth_settings, request_auth=None)

      Updates header and query params based on authentication setting.

      :param headers: Header parameters dict to be updated.
      :param queries: Query parameters tuple list to be updated.
      :param auth_settings: Authentication setting identifiers list.
      :param request_auth: if set, the provided settings will
                           override the token in the configuration.



   .. py:method:: _apply_auth_params(headers, queries, auth_setting)

      Updates the request parameters based on a single auth_setting

      :param headers: Header parameters dict to be updated.
      :param queries: Query parameters tuple list to be updated.
      :param auth_setting: auth settings for the endpoint



   .. py:method:: __deserialize_file(response)

      Deserializes body to file

      Saves response body into a file in a temporary folder,
      using the filename from the `Content-Disposition` header if provided.

      :param response:  RESTResponse.
      :return: file path.



   .. py:method:: __deserialize_primitive(data, klass)

      Deserializes string to primitive type.

      :param data: str.
      :param klass: class literal.

      :return: int, long, float, str, bool.



   .. py:method:: __deserialize_object(value)

      Return an original value.

      :return: object.



   .. py:method:: __deserialize_date(string)

      Deserializes string to date.

      :param string: str.
      :return: date.



   .. py:method:: __deserialize_datetime(string)

      Deserializes string to datetime.

      The string should be in iso8601 datetime format.

      :param string: str.
      :return: datetime.



   .. py:method:: __deserialize_model(data, klass)

      Deserializes list or dict to model.

      :param data: dict, list.
      :param klass: class literal.
      :return: model object.



