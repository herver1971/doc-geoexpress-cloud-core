geonode.geoserver.acl.gsauth_client
===================================

.. py:module:: geonode.geoserver.acl.gsauth_client

.. autoapi-nested-parse::

   GeoServer ACL

   GeoServer Access Control List API  # noqa: E501

   The version of the OpenAPI document: 1.0.0
   Generated by: https://openapi-generator.tech



Subpackages
-----------

.. toctree::
   :maxdepth: 1

   /autoapi/geonode/geoserver/acl/gsauth_client/api/index
   /autoapi/geonode/geoserver/acl/gsauth_client/models/index


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/geonode/geoserver/acl/gsauth_client/api_client/index
   /autoapi/geonode/geoserver/acl/gsauth_client/configuration/index
   /autoapi/geonode/geoserver/acl/gsauth_client/exceptions/index
   /autoapi/geonode/geoserver/acl/gsauth_client/rest/index


Attributes
----------

.. autoapisummary::

   geonode.geoserver.acl.gsauth_client.__version__


Exceptions
----------

.. autoapisummary::

   geonode.geoserver.acl.gsauth_client.OpenApiException
   geonode.geoserver.acl.gsauth_client.ApiTypeError
   geonode.geoserver.acl.gsauth_client.ApiValueError
   geonode.geoserver.acl.gsauth_client.ApiKeyError
   geonode.geoserver.acl.gsauth_client.ApiAttributeError
   geonode.geoserver.acl.gsauth_client.ApiException


Classes
-------

.. autoapisummary::

   geonode.geoserver.acl.gsauth_client.AdminRulesApi
   geonode.geoserver.acl.gsauth_client.AuthorizationApi
   geonode.geoserver.acl.gsauth_client.RulesApi
   geonode.geoserver.acl.gsauth_client.ApiClient
   geonode.geoserver.acl.gsauth_client.Configuration
   geonode.geoserver.acl.gsauth_client.AccessInfo
   geonode.geoserver.acl.gsauth_client.AccessRequest
   geonode.geoserver.acl.gsauth_client.AddressRangeFilter
   geonode.geoserver.acl.gsauth_client.AdminAccessInfo
   geonode.geoserver.acl.gsauth_client.AdminAccessRequest
   geonode.geoserver.acl.gsauth_client.AdminGrantType
   geonode.geoserver.acl.gsauth_client.AdminRule
   geonode.geoserver.acl.gsauth_client.AdminRuleFilter
   geonode.geoserver.acl.gsauth_client.CatalogMode
   geonode.geoserver.acl.gsauth_client.Geom
   geonode.geoserver.acl.gsauth_client.GrantType
   geonode.geoserver.acl.gsauth_client.InsertPosition
   geonode.geoserver.acl.gsauth_client.LayerAttribute
   geonode.geoserver.acl.gsauth_client.LayerDetails
   geonode.geoserver.acl.gsauth_client.Rule
   geonode.geoserver.acl.gsauth_client.RuleFilter
   geonode.geoserver.acl.gsauth_client.RuleLimits
   geonode.geoserver.acl.gsauth_client.SetFilter
   geonode.geoserver.acl.gsauth_client.SpatialFilterType
   geonode.geoserver.acl.gsauth_client.TextFilter
   geonode.geoserver.acl.gsauth_client.Wkb
   geonode.geoserver.acl.gsauth_client.Wkt


Package Contents
----------------

.. py:data:: __version__
   :value: '1.0.0'


.. py:class:: AdminRulesApi(api_client=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: api_client


   .. py:method:: admin_rule_exists_by_id(id, **kwargs)

      admin_rule_exists_by_id  # noqa: E501

      Returns whether the AdminRule with the given identifier exists  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.admin_rule_exists_by_id(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: bool



   .. py:method:: admin_rule_exists_by_id_with_http_info(id, **kwargs)

      admin_rule_exists_by_id  # noqa: E501

      Returns whether the AdminRule with the given identifier exists  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.admin_rule_exists_by_id_with_http_info(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(bool, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: count_admin_rules(admin_rule_filter, **kwargs)

      count_admin_rules  # noqa: E501

      Returns the number of rules that matches the search criteria  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.count_admin_rules(admin_rule_filter, async_req=True)
      >>> result = thread.get()

      :param admin_rule_filter: (required)
      :type admin_rule_filter: AdminRuleFilter
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: int



   .. py:method:: count_admin_rules_with_http_info(admin_rule_filter, **kwargs)

      count_admin_rules  # noqa: E501

      Returns the number of rules that matches the search criteria  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.count_admin_rules_with_http_info(admin_rule_filter, async_req=True)
      >>> result = thread.get()

      :param admin_rule_filter: (required)
      :type admin_rule_filter: AdminRuleFilter
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: count_all_admin_rules(**kwargs)

      count_all_admin_rules  # noqa: E501

      Returns the total number of rules  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.count_all_admin_rules(async_req=True)
      >>> result = thread.get()

      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: int



   .. py:method:: count_all_admin_rules_with_http_info(**kwargs)

      count_all_admin_rules  # noqa: E501

      Returns the total number of rules  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.count_all_admin_rules_with_http_info(async_req=True)
      >>> result = thread.get()

      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: create_admin_rule(admin_rule, **kwargs)

      create_admin_rule  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.create_admin_rule(admin_rule, async_req=True)
      >>> result = thread.get()

      :param admin_rule: (required)
      :type admin_rule: AdminRule
      :param position: Displacement option related to how to interpret the Rule's priority
      :type position: InsertPosition
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: AdminRule



   .. py:method:: create_admin_rule_with_http_info(admin_rule, **kwargs)

      create_admin_rule  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.create_admin_rule_with_http_info(admin_rule, async_req=True)
      >>> result = thread.get()

      :param admin_rule: (required)
      :type admin_rule: AdminRule
      :param position: Displacement option related to how to interpret the Rule's priority
      :type position: InsertPosition
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(AdminRule, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: delete_admin_rule_by_id(id, **kwargs)

      delete_admin_rule_by_id  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.delete_admin_rule_by_id(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: None



   .. py:method:: delete_admin_rule_by_id_with_http_info(id, **kwargs)

      delete_admin_rule_by_id  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.delete_admin_rule_by_id_with_http_info(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: None



   .. py:method:: find_admin_rules(**kwargs)

      find_admin_rules  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.find_admin_rules(async_req=True)
      >>> result = thread.get()

      :param limit: Maximum number of rules to return from the query. If there are more rules, the response will return an X-ACL-NEXTCURSOR header with a value that can be used for the nextCursor parameter on a subsequent request, until X-ACL-NEXTCURSOR is null
      :type limit: int
      :param next_cursor: The next cursor identifier when doing cursor paging, as returned by the X-ACL-NEXTCURSOR response header
      :type next_cursor: str
      :param admin_rule_filter:
      :type admin_rule_filter: AdminRuleFilter
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: list[AdminRule]



   .. py:method:: find_admin_rules_with_http_info(**kwargs)

      find_admin_rules  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.find_admin_rules_with_http_info(async_req=True)
      >>> result = thread.get()

      :param limit: Maximum number of rules to return from the query. If there are more rules, the response will return an X-ACL-NEXTCURSOR header with a value that can be used for the nextCursor parameter on a subsequent request, until X-ACL-NEXTCURSOR is null
      :type limit: int
      :param next_cursor: The next cursor identifier when doing cursor paging, as returned by the X-ACL-NEXTCURSOR response header
      :type next_cursor: str
      :param admin_rule_filter:
      :type admin_rule_filter: AdminRuleFilter
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(list[AdminRule], status_code(int), headers(HTTPHeaderDict))



   .. py:method:: find_all_admin_rules(**kwargs)

      find_all_admin_rules  # noqa: E501

      Returns an (optionally) paginated list of admin rules.  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.find_all_admin_rules(async_req=True)
      >>> result = thread.get()

      :param limit: Maximum number of rules to return from the query. If there are more rules, the response will return an X-ACL-NEXTCURSOR header with a value that can be used for the nextCursor parameter on a subsequent request, until X-ACL-NEXTCURSOR is null
      :type limit: int
      :param next_cursor: The next cursor identifier when doing cursor paging, as returned by the X-ACL-NEXTCURSOR response header
      :type next_cursor: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: list[AdminRule]



   .. py:method:: find_all_admin_rules_with_http_info(**kwargs)

      find_all_admin_rules  # noqa: E501

      Returns an (optionally) paginated list of admin rules.  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.find_all_admin_rules_with_http_info(async_req=True)
      >>> result = thread.get()

      :param limit: Maximum number of rules to return from the query. If there are more rules, the response will return an X-ACL-NEXTCURSOR header with a value that can be used for the nextCursor parameter on a subsequent request, until X-ACL-NEXTCURSOR is null
      :type limit: int
      :param next_cursor: The next cursor identifier when doing cursor paging, as returned by the X-ACL-NEXTCURSOR response header
      :type next_cursor: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(list[AdminRule], status_code(int), headers(HTTPHeaderDict))



   .. py:method:: find_first_admin_rule(admin_rule_filter, **kwargs)

      find_first_admin_rule  # noqa: E501

      Finds the first rule that satisfies the query criteria  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.find_first_admin_rule(admin_rule_filter, async_req=True)
      >>> result = thread.get()

      :param admin_rule_filter: (required)
      :type admin_rule_filter: AdminRuleFilter
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: AdminRule



   .. py:method:: find_first_admin_rule_with_http_info(admin_rule_filter, **kwargs)

      find_first_admin_rule  # noqa: E501

      Finds the first rule that satisfies the query criteria  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.find_first_admin_rule_with_http_info(admin_rule_filter, async_req=True)
      >>> result = thread.get()

      :param admin_rule_filter: (required)
      :type admin_rule_filter: AdminRuleFilter
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(AdminRule, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: find_one_admin_rule_by_priority(priority, **kwargs)

      find_one_admin_rule_by_priority  # noqa: E501

      Finds the AdminRule with the given priority  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.find_one_admin_rule_by_priority(priority, async_req=True)
      >>> result = thread.get()

      :param priority: The rule priority to search for (required)
      :type priority: int
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: AdminRule



   .. py:method:: find_one_admin_rule_by_priority_with_http_info(priority, **kwargs)

      find_one_admin_rule_by_priority  # noqa: E501

      Finds the AdminRule with the given priority  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.find_one_admin_rule_by_priority_with_http_info(priority, async_req=True)
      >>> result = thread.get()

      :param priority: The rule priority to search for (required)
      :type priority: int
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(AdminRule, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: get_admin_rule_by_id(id, **kwargs)

      get_admin_rule_by_id  # noqa: E501

      Returns the AdminRule with the given identifier  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_admin_rule_by_id(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: AdminRule



   .. py:method:: get_admin_rule_by_id_with_http_info(id, **kwargs)

      get_admin_rule_by_id  # noqa: E501

      Returns the AdminRule with the given identifier  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_admin_rule_by_id_with_http_info(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(AdminRule, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: shift_admin_rules_by_piority(priority_start, offset, **kwargs)

      shift_admin_rules_by_piority  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.shift_admin_rules_by_piority(priority_start, offset, async_req=True)
      >>> result = thread.get()

      :param priority_start: The minimum priority to start shifting at (inclusive) (required)
      :type priority_start: int
      :param offset: The priority offset to apply to all rules from priorityStart onwards (required)
      :type offset: int
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: int



   .. py:method:: shift_admin_rules_by_piority_with_http_info(priority_start, offset, **kwargs)

      shift_admin_rules_by_piority  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.shift_admin_rules_by_piority_with_http_info(priority_start, offset, async_req=True)
      >>> result = thread.get()

      :param priority_start: The minimum priority to start shifting at (inclusive) (required)
      :type priority_start: int
      :param offset: The priority offset to apply to all rules from priorityStart onwards (required)
      :type offset: int
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: swap_admin_rules(id, id2, **kwargs)

      swap_admin_rules  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.swap_admin_rules(id, id2, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param id2: The admin rule identifier to swap priorities with (required)
      :type id2: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: None



   .. py:method:: swap_admin_rules_with_http_info(id, id2, **kwargs)

      swap_admin_rules  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.swap_admin_rules_with_http_info(id, id2, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param id2: The admin rule identifier to swap priorities with (required)
      :type id2: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: None



   .. py:method:: update_admin_rule(id, admin_rule, **kwargs)

      update_admin_rule  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.update_admin_rule(id, admin_rule, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param admin_rule: (required)
      :type admin_rule: AdminRule
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: AdminRule



   .. py:method:: update_admin_rule_with_http_info(id, admin_rule, **kwargs)

      update_admin_rule  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an asynchronous HTTP request, please pass async_req=True

      >>> thread = api.update_admin_rule_with_http_info(id, admin_rule, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param admin_rule: (required)
      :type admin_rule: AdminRule
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(AdminRule, status_code(int), headers(HTTPHeaderDict))



.. py:class:: AuthorizationApi(api_client=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: api_client


   .. py:method:: get_access_info(access_request, **kwargs)

      get_access_info  # noqa: E501

      Computes the grant access info for the given request  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_access_info(access_request, async_req=True)
      >>> result = thread.get()

      :param access_request: (required)
      :type access_request: AccessRequest
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: AccessInfo



   .. py:method:: get_access_info_with_http_info(access_request, **kwargs)

      get_access_info  # noqa: E501

      Computes the grant access info for the given request  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_access_info_with_http_info(access_request, async_req=True)
      >>> result = thread.get()

      :param access_request: (required)
      :type access_request: AccessRequest
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(AccessInfo, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: get_admin_authorization(admin_access_request, **kwargs)

      get_admin_authorization  # noqa: E501

      Computes info about admin authorization on a given workspace. Returned AccessInfo will always be ALLOW, with the computed adminRights.  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_admin_authorization(admin_access_request, async_req=True)
      >>> result = thread.get()

      :param admin_access_request: (required)
      :type admin_access_request: AdminAccessRequest
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: AdminAccessInfo



   .. py:method:: get_admin_authorization_with_http_info(admin_access_request, **kwargs)

      get_admin_authorization  # noqa: E501

      Computes info about admin authorization on a given workspace. Returned AccessInfo will always be ALLOW, with the computed adminRights.  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_admin_authorization_with_http_info(admin_access_request, async_req=True)
      >>> result = thread.get()

      :param admin_access_request: (required)
      :type admin_access_request: AdminAccessRequest
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(AdminAccessInfo, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: get_matching_rules(access_request, **kwargs)

      get_matching_rules  # noqa: E501

      Obtains the plain list of matching rules that are applied to the given AccessRequest when computing the AccessInfo  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_matching_rules(access_request, async_req=True)
      >>> result = thread.get()

      :param access_request: (required)
      :type access_request: AccessRequest
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: list[Rule]



   .. py:method:: get_matching_rules_with_http_info(access_request, **kwargs)

      get_matching_rules  # noqa: E501

      Obtains the plain list of matching rules that are applied to the given AccessRequest when computing the AccessInfo  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_matching_rules_with_http_info(access_request, async_req=True)
      >>> result = thread.get()

      :param access_request: (required)
      :type access_request: AccessRequest
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(list[Rule], status_code(int), headers(HTTPHeaderDict))



.. py:class:: RulesApi(api_client=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: api_client


   .. py:method:: count_all_rules(**kwargs)

      count_all_rules  # noqa: E501

      Returns the total number of rules  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.count_all_rules(async_req=True)
      >>> result = thread.get()

      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: int



   .. py:method:: count_all_rules_with_http_info(**kwargs)

      count_all_rules  # noqa: E501

      Returns the total number of rules  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.count_all_rules_with_http_info(async_req=True)
      >>> result = thread.get()

      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: count_rules(rule_filter, **kwargs)

      count_rules  # noqa: E501

      Returns the number of rules that matches the search criteria  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.count_rules(rule_filter, async_req=True)
      >>> result = thread.get()

      :param rule_filter: (required)
      :type rule_filter: RuleFilter
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: int



   .. py:method:: count_rules_with_http_info(rule_filter, **kwargs)

      count_rules  # noqa: E501

      Returns the number of rules that matches the search criteria  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.count_rules_with_http_info(rule_filter, async_req=True)
      >>> result = thread.get()

      :param rule_filter: (required)
      :type rule_filter: RuleFilter
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: create_rule(rule, **kwargs)

      create_rule  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.create_rule(rule, async_req=True)
      >>> result = thread.get()

      :param rule: (required)
      :type rule: Rule
      :param position: Displacement option related to how to interpret the Rule's priority
      :type position: InsertPosition
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: Rule



   .. py:method:: create_rule_with_http_info(rule, **kwargs)

      create_rule  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.create_rule_with_http_info(rule, async_req=True)
      >>> result = thread.get()

      :param rule: (required)
      :type rule: Rule
      :param position: Displacement option related to how to interpret the Rule's priority
      :type position: InsertPosition
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(Rule, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: delete_rule_by_id(id, **kwargs)

      delete_rule_by_id  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.delete_rule_by_id(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: None



   .. py:method:: delete_rule_by_id_with_http_info(id, **kwargs)

      delete_rule_by_id  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.delete_rule_by_id_with_http_info(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: None



   .. py:method:: find_one_rule_by_priority(priority, **kwargs)

      find_one_rule_by_priority  # noqa: E501

      Finds the Rule with the given priority  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.find_one_rule_by_priority(priority, async_req=True)
      >>> result = thread.get()

      :param priority: The rule priority to search for (required)
      :type priority: int
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: Rule



   .. py:method:: find_one_rule_by_priority_with_http_info(priority, **kwargs)

      find_one_rule_by_priority  # noqa: E501

      Finds the Rule with the given priority  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.find_one_rule_by_priority_with_http_info(priority, async_req=True)
      >>> result = thread.get()

      :param priority: The rule priority to search for (required)
      :type priority: int
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(Rule, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: get_layer_details_by_rule_id(id, **kwargs)

      get_layer_details_by_rule_id  # noqa: E501

      Returns the LayerDetails for the Rule with the given identifier  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_layer_details_by_rule_id(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: LayerDetails



   .. py:method:: get_layer_details_by_rule_id_with_http_info(id, **kwargs)

      get_layer_details_by_rule_id  # noqa: E501

      Returns the LayerDetails for the Rule with the given identifier  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_layer_details_by_rule_id_with_http_info(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(LayerDetails, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: get_rule_by_id(id, **kwargs)

      get_rule_by_id  # noqa: E501

      Returns the Rule with the given identifier  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_rule_by_id(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: Rule



   .. py:method:: get_rule_by_id_with_http_info(id, **kwargs)

      get_rule_by_id  # noqa: E501

      Returns the Rule with the given identifier  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_rule_by_id_with_http_info(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(Rule, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: get_rules(**kwargs)

      get_rules  # noqa: E501

      Returns an (optionally) paginated list of rules. See also the count operation.  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_rules(async_req=True)
      >>> result = thread.get()

      :param limit: Maximum number of rules to return from the query. If there are more rules, the response will return an X-ACL-NEXTCURSOR header with a value that can be used for the nextCursor parameter on a subsequent request, until X-ACL-NEXTCURSOR is null
      :type limit: int
      :param next_cursor: The next cursor identifier when doing cursor paging, as returned by the X-ACL-NEXTCURSOR response header
      :type next_cursor: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: list[Rule]



   .. py:method:: get_rules_with_http_info(**kwargs)

      get_rules  # noqa: E501

      Returns an (optionally) paginated list of rules. See also the count operation.  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.get_rules_with_http_info(async_req=True)
      >>> result = thread.get()

      :param limit: Maximum number of rules to return from the query. If there are more rules, the response will return an X-ACL-NEXTCURSOR header with a value that can be used for the nextCursor parameter on a subsequent request, until X-ACL-NEXTCURSOR is null
      :type limit: int
      :param next_cursor: The next cursor identifier when doing cursor paging, as returned by the X-ACL-NEXTCURSOR response header
      :type next_cursor: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(list[Rule], status_code(int), headers(HTTPHeaderDict))



   .. py:method:: query_rules(**kwargs)

      query_rules  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.query_rules(async_req=True)
      >>> result = thread.get()

      :param limit: Maximum number of rules to return from the query. If there are more rules, the response will return an X-ACL-NEXTCURSOR header with a value that can be used for the nextCursor parameter on a subsequent request, until X-ACL-NEXTCURSOR is null
      :type limit: int
      :param next_cursor: The next cursor identifier when doing cursor paging, as returned by the X-ACL-NEXTCURSOR response header
      :type next_cursor: str
      :param rule_filter:
      :type rule_filter: RuleFilter
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: list[Rule]



   .. py:method:: query_rules_with_http_info(**kwargs)

      query_rules  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.query_rules_with_http_info(async_req=True)
      >>> result = thread.get()

      :param limit: Maximum number of rules to return from the query. If there are more rules, the response will return an X-ACL-NEXTCURSOR header with a value that can be used for the nextCursor parameter on a subsequent request, until X-ACL-NEXTCURSOR is null
      :type limit: int
      :param next_cursor: The next cursor identifier when doing cursor paging, as returned by the X-ACL-NEXTCURSOR response header
      :type next_cursor: str
      :param rule_filter:
      :type rule_filter: RuleFilter
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(list[Rule], status_code(int), headers(HTTPHeaderDict))



   .. py:method:: rule_exists_by_id(id, **kwargs)

      rule_exists_by_id  # noqa: E501

      Returns the Rule with the given identifier  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.rule_exists_by_id(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: bool



   .. py:method:: rule_exists_by_id_with_http_info(id, **kwargs)

      rule_exists_by_id  # noqa: E501

      Returns the Rule with the given identifier  # noqa: E501
      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.rule_exists_by_id_with_http_info(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(bool, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: set_rule_allowed_styles(id, **kwargs)

      set_rule_allowed_styles  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.set_rule_allowed_styles(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param request_body:
      :type request_body: list[str]
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: None



   .. py:method:: set_rule_allowed_styles_with_http_info(id, **kwargs)

      set_rule_allowed_styles  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.set_rule_allowed_styles_with_http_info(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param request_body:
      :type request_body: list[str]
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: None



   .. py:method:: set_rule_layer_details(id, **kwargs)

      set_rule_layer_details  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.set_rule_layer_details(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param layer_details:
      :type layer_details: LayerDetails
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: None



   .. py:method:: set_rule_layer_details_with_http_info(id, **kwargs)

      set_rule_layer_details  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.set_rule_layer_details_with_http_info(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param layer_details:
      :type layer_details: LayerDetails
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: None



   .. py:method:: set_rule_limits(id, **kwargs)

      set_rule_limits  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.set_rule_limits(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param rule_limits:
      :type rule_limits: RuleLimits
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: None



   .. py:method:: set_rule_limits_with_http_info(id, **kwargs)

      set_rule_limits  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.set_rule_limits_with_http_info(id, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param rule_limits:
      :type rule_limits: RuleLimits
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: None



   .. py:method:: shift_rules_by_priority(priority_start, offset, **kwargs)

      shift_rules_by_priority  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.shift_rules_by_priority(priority_start, offset, async_req=True)
      >>> result = thread.get()

      :param priority_start: The minimum priority to start shifting at (inclusive) (required)
      :type priority_start: int
      :param offset: The priority offset to apply to all rules from priorityStart onwards (required)
      :type offset: int
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: int



   .. py:method:: shift_rules_by_priority_with_http_info(priority_start, offset, **kwargs)

      shift_rules_by_priority  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.shift_rules_by_priority_with_http_info(priority_start, offset, async_req=True)
      >>> result = thread.get()

      :param priority_start: The minimum priority to start shifting at (inclusive) (required)
      :type priority_start: int
      :param offset: The priority offset to apply to all rules from priorityStart onwards (required)
      :type offset: int
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))



   .. py:method:: swap_rules(id, id2, **kwargs)

      swap_rules  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.swap_rules(id, id2, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param id2: The rule identifier to swap priorities with (required)
      :type id2: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: None



   .. py:method:: swap_rules_with_http_info(id, id2, **kwargs)

      swap_rules  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.swap_rules_with_http_info(id, id2, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param id2: The rule identifier to swap priorities with (required)
      :type id2: str
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: None



   .. py:method:: update_rule_by_id(id, rule, **kwargs)

      update_rule_by_id  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.update_rule_by_id(id, rule, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param rule: (required)
      :type rule: Rule
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: Rule



   .. py:method:: update_rule_by_id_with_http_info(id, rule, **kwargs)

      update_rule_by_id  # noqa: E501

      This method makes a synchronous HTTP request by default. To make an
      asynchronous HTTP request, please pass async_req=True

      >>> thread = api.update_rule_by_id_with_http_info(id, rule, async_req=True)
      >>> result = thread.get()

      :param id: The rule identifier (required)
      :type id: str
      :param rule: (required)
      :type rule: Rule
      :param async_req: Whether to execute the request asynchronously.
      :type async_req: bool, optional
      :param _return_http_data_only: response data without head status code
                                     and headers
      :type _return_http_data_only: bool, optional
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :type _preload_content: bool, optional
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_auth: dict, optional
      :type _content_type: string, optional: force content-type for the request
      :return: Returns the result object.
               If the method is called asynchronously,
               returns the request thread.
      :rtype: tuple(Rule, status_code(int), headers(HTTPHeaderDict))



.. py:class:: ApiClient(configuration=None, header_name=None, header_value=None, cookie=None, pool_threads=1)

   Bases: :py:obj:`object`


   Generic API client for OpenAPI client library builds.

   OpenAPI generic API client. This client handles the client-
   server communication, and is invariant across implementations. Specifics of
   the methods and models for each application are generated from the OpenAPI
   templates.

   .. note::
       This class is auto generated by OpenAPI Generator.
       Ref: https://openapi-generator.tech
       Do not edit the class manually.

   :param configuration: .Configuration object for this client
   :param header_name: a header to pass when making calls to the API.
   :param header_value: a header value to pass when making calls to
       the API.
   :param cookie: a cookie to include in the header when making calls
       to the API
   :param pool_threads: The number of threads to use for async requests
       to the API. More threads means more concurrent API requests.


   .. py:attribute:: PRIMITIVE_TYPES


   .. py:attribute:: NATIVE_TYPES_MAPPING


   .. py:attribute:: _pool
      :value: None



   .. py:attribute:: configuration


   .. py:attribute:: pool_threads


   .. py:attribute:: rest_client


   .. py:attribute:: default_headers


   .. py:attribute:: cookie


   .. py:property:: user_agent
      User agent for this API client


   .. py:attribute:: client_side_validation


   .. py:method:: __enter__()


   .. py:method:: __exit__(exc_type, exc_value, traceback)


   .. py:method:: close()


   .. py:property:: pool
      Create thread pool on first request
      avoids instantiating unused threadpool for blocking clients.


   .. py:method:: set_default_header(header_name, header_value)


   .. py:method:: __call_api(resource_path, method, path_params=None, query_params=None, header_params=None, body=None, post_params=None, files=None, response_types_map=None, auth_settings=None, _return_http_data_only=None, collection_formats=None, _preload_content=True, _request_timeout=None, _host=None, _request_auth=None)


   .. py:method:: sanitize_for_serialization(obj)

      Builds a JSON POST object.

      If obj is None, return None.
      If obj is str, int, long, float, bool, return directly.
      If obj is datetime.datetime, datetime.date convert to string in iso8601 format.
      If obj is list, sanitize each element in the list.
      If obj is dict, return the dict.
      If obj is OpenAPI model, return the properties dict.

      :param obj: The data to serialize.
      :return: The serialized form of data.



   .. py:method:: deserialize(response, response_type)

      Deserializes response into an object.

      :param response: RESTResponse object to be deserialized.
      :param response_type: class literal for
          deserialized object, or string of class name.

      :return: deserialized object.



   .. py:method:: __deserialize(data, klass)

      Deserializes dict, list, str into an object.

      :param data: dict, list or str.
      :param klass: class literal, or string of class name.

      :return: object.



   .. py:method:: call_api(resource_path, method, path_params=None, query_params=None, header_params=None, body=None, post_params=None, files=None, response_types_map=None, auth_settings=None, async_req=None, _return_http_data_only=None, collection_formats=None, _preload_content=True, _request_timeout=None, _host=None, _request_auth=None)

      Makes the HTTP request (synchronous) and returns deserialized data.

      To make an async_req request, set the async_req parameter.

      :param resource_path: Path to method endpoint.
      :param method: Method to call.
      :param path_params: Path parameters in the url.
      :param query_params: Query parameters in the url.
      :param header_params: Header parameters to be
          placed in the request header.
      :param body: Request body.
      :param post_params dict: Request post form parameters,
          for `application/x-www-form-urlencoded`, `multipart/form-data`.
      :param auth_settings list: Auth Settings names for the request.
      :param response: Response data type.
      :param files dict: key -> filename, value -> filepath,
          for `multipart/form-data`.
      :param async_req bool: execute request asynchronously
      :param _return_http_data_only: response data without head status code
                                     and headers
      :param collection_formats: dict of collection formats for path, query,
          header, and post parameters.
      :param _preload_content: if False, the urllib3.HTTPResponse object will
                               be returned without reading/decoding response
                               data. Default is True.
      :param _request_timeout: timeout setting for this request. If one
                               number provided, it will be total request
                               timeout. It can also be a pair (tuple) of
                               (connection, read) timeouts.
      :param _request_auth: set to override the auth_settings for an a single
                            request; this effectively ignores the authentication
                            in the spec for a single request.
      :type _request_token: dict, optional
      :return:
          If async_req parameter is True,
          the request will be called asynchronously.
          The method will return the request thread.
          If parameter async_req is False or missing,
          then the method will return the response directly.



   .. py:method:: request(method, url, query_params=None, headers=None, post_params=None, body=None, _preload_content=True, _request_timeout=None)

      Makes the HTTP request using RESTClient.



   .. py:method:: parameters_to_tuples(params, collection_formats)

      Get parameters as list of tuples, formatting collections.

      :param params: Parameters as dict or list of two-tuples
      :param dict collection_formats: Parameter collection formats
      :return: Parameters as list of tuples, collections formatted



   .. py:method:: files_parameters(files=None)

      Builds form parameters.

      :param files: File parameters.
      :return: Form parameters with files.



   .. py:method:: select_header_accept(accepts)

      Returns `Accept` based on an array of accepts provided.

      :param accepts: List of headers.
      :return: Accept (e.g. application/json).



   .. py:method:: select_header_content_type(content_types, method=None, body=None)

      Returns `Content-Type` based on an array of content_types provided.

      :param content_types: List of content-types.
      :param method: http method (e.g. POST, PATCH).
      :param body: http body to send.
      :return: Content-Type (e.g. application/json).



   .. py:method:: update_params_for_auth(headers, queries, auth_settings, request_auth=None)

      Updates header and query params based on authentication setting.

      :param headers: Header parameters dict to be updated.
      :param queries: Query parameters tuple list to be updated.
      :param auth_settings: Authentication setting identifiers list.
      :param request_auth: if set, the provided settings will
                           override the token in the configuration.



   .. py:method:: _apply_auth_params(headers, queries, auth_setting)

      Updates the request parameters based on a single auth_setting

      :param headers: Header parameters dict to be updated.
      :param queries: Query parameters tuple list to be updated.
      :param auth_setting: auth settings for the endpoint



   .. py:method:: __deserialize_file(response)

      Deserializes body to file

      Saves response body into a file in a temporary folder,
      using the filename from the `Content-Disposition` header if provided.

      :param response:  RESTResponse.
      :return: file path.



   .. py:method:: __deserialize_primitive(data, klass)

      Deserializes string to primitive type.

      :param data: str.
      :param klass: class literal.

      :return: int, long, float, str, bool.



   .. py:method:: __deserialize_object(value)

      Return an original value.

      :return: object.



   .. py:method:: __deserialize_date(string)

      Deserializes string to date.

      :param string: str.
      :return: date.



   .. py:method:: __deserialize_datetime(string)

      Deserializes string to datetime.

      The string should be in iso8601 datetime format.

      :param string: str.
      :return: datetime.



   .. py:method:: __deserialize_model(data, klass)

      Deserializes list or dict to model.

      :param data: dict, list.
      :param klass: class literal.
      :return: model object.



.. py:class:: Configuration(host=None, api_key=None, api_key_prefix=None, username=None, password=None, discard_unknown_keys=False, disabled_client_side_validations='', server_index=None, server_variables=None, server_operation_index=None, server_operation_variables=None, ssl_ca_cert=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator

   Ref: https://openapi-generator.tech
   Do not edit the class manually.

   :param host: Base url
   :param api_key: Dict to store API key(s).
     Each entry in the dict specifies an API key.
     The dict key is the name of the security scheme in the OAS specification.
     The dict value is the API key secret.
   :param api_key_prefix: Dict to store API prefix (e.g. Bearer)
     The dict key is the name of the security scheme in the OAS specification.
     The dict value is an API key prefix when generating the auth data.
   :param username: Username for HTTP basic authentication
   :param password: Password for HTTP basic authentication
   :param discard_unknown_keys: Boolean value indicating whether to discard unknown properties. A server may send a response that includes additional properties that are not known by the client in the following scenarios:

     1. The OpenAPI document is incomplete, i.e. it does not match the server implementation.
     2. The client was generated using an older version of the OpenAPI document and the server has been upgraded since then.

   If a schema in the OpenAPI document defines the additionalProperties attribute, then all undeclared properties received by the server are injected into the additional properties map. In that case, there are undeclared properties, and nothing to discard.

   :param disabled_client_side_validations (string): Comma-separated list of JSON schema validation keywords to disable JSON schema structural validation rules. The following keywords may be specified: multipleOf, maximum, exclusiveMaximum, minimum, exclusiveMinimum, maxLength, minLength, pattern, maxItems, minItems.
       By default, the validation is performed for data generated locally by the client and data received from the server, independent of any validation performed by the server side. If the input data does not satisfy the JSON schema validation rules specified in the OpenAPI document, an exception is raised.
       If disabled_client_side_validations is set, structural validation is disabled. This can be useful to troubleshoot data validation problem, such as when the OpenAPI document validation rules do not match the actual API data received by the server.
   :param server_index: Index to servers configuration.
   :param server_variables: Mapping with string values to replace variables in templated server configuration. The validation of enums is performed for variables with defined enum values before.
   :param server_operation_index: Mapping from operation ID to an index to server configuration.
   :param server_operation_variables: Mapping from operation ID to a mapping with string values to replace variables in templated server configuration.
       The validation of enums is performed for variables with defined enum values before.
   :param ssl_ca_cert: str - the path to a file of concatenated CA certificates in PEM format

   :Example:

       HTTP Basic Authentication Example.

       Given the following security scheme in the OpenAPI specification:
           components:
           securitySchemes:
           http_basic_auth:
           type: http
           scheme: basic

   Configure API client with HTTP basic authentication:

   conf = gsauth_client.Configuration(
       username='the-user',
       password='the-password',
       )



   .. py:attribute:: _default
      :value: None



   .. py:attribute:: _base_path

      Default Base url


   .. py:attribute:: server_index


   .. py:attribute:: server_operation_index

      Default server index


   .. py:attribute:: server_variables


   .. py:attribute:: server_operation_variables

      Default server variables


   .. py:attribute:: temp_folder_path
      :value: None


      Temp file folder for downloading files


   .. py:attribute:: api_key


   .. py:attribute:: api_key_prefix


   .. py:attribute:: refresh_api_key_hook
      :value: None


      function hook to refresh API key if expired


   .. py:attribute:: username

      Username for HTTP basic authentication


   .. py:attribute:: password

      Password for HTTP basic authentication


   .. py:attribute:: discard_unknown_keys


   .. py:attribute:: disabled_client_side_validations


   .. py:attribute:: logger

      Logging Settings


   .. py:property:: logger_format
      The logger format.

      The logger_formatter will be updated when sets logger_format.

      :param value: The format string.
      :type: str


   .. py:attribute:: logger_stream_handler
      :value: None


      Log stream handler


   .. py:attribute:: logger_file_handler
      :value: None


      Log file handler


   .. py:property:: logger_file
      The logger file.

      If the logger_file is None, then add stream handler and remove file
      handler. Otherwise, add file handler and remove stream handler.

      :param value: The logger_file path.
      :type: str


   .. py:property:: debug
      Debug status

      :param value: The debug status, True or False.
      :type: bool


   .. py:attribute:: verify_ssl
      :value: True


      SSL/TLS verification
      Set this to false to skip verifying SSL certificate when calling API
      from https server.


   .. py:attribute:: ssl_ca_cert

      Set this to customize the certificate file to verify the peer.


   .. py:attribute:: cert_file
      :value: None


      client certificate file


   .. py:attribute:: key_file
      :value: None


      client key file


   .. py:attribute:: assert_hostname
      :value: None


      Set this to True/False to enable/disable SSL hostname verification.


   .. py:attribute:: connection_pool_maxsize

      urllib3 connection pool's maximum number of connections saved
      per pool. urllib3 uses 1 connection as default value, but this is
      not the best value when you are making a lot of possibly parallel
      requests to the same host, which is often the case here.
      cpu_count * 5 is used as default value to increase performance.


   .. py:attribute:: proxy
      :value: None


      Proxy URL


   .. py:attribute:: proxy_headers
      :value: None


      Proxy headers


   .. py:attribute:: safe_chars_for_path_param
      :value: ''


      Safe chars for path_param


   .. py:attribute:: retries
      :value: None


      Adding retries to override urllib3 default value 3


   .. py:attribute:: client_side_validation
      :value: True



   .. py:attribute:: socket_options
      :value: None


      Options to pass down to the underlying urllib3 socket


   .. py:method:: __deepcopy__(memo)


   .. py:method:: __setattr__(name, value)


   .. py:method:: set_default(default)
      :classmethod:


      Set default instance of configuration.

      It stores default configuration, which can be
      returned by get_default_copy method.

      :param default: object of Configuration



   .. py:method:: get_default_copy()
      :classmethod:


      Return new instance of configuration.

      This method returns newly created, based on default constructor,
      object of Configuration class or returns a copy of default
      configuration passed by the set_default method.

      :return: The configuration object.



   .. py:method:: get_api_key_with_prefix(identifier, alias=None)

      Gets API key (with prefix if set).

      :param identifier: The identifier of apiKey.
      :param alias: The alternative identifier of apiKey.
      :return: The token for api key authentication.



   .. py:method:: get_basic_auth_token()

      Gets HTTP basic authentication header (string).

      :return: The token for basic HTTP authentication.



   .. py:method:: auth_settings()

      Gets Auth Settings dict for api client.

      :return: The Auth Settings information dict.



   .. py:method:: to_debug_report()

      Gets the essential information for debugging.

      :return: The report for debugging.



   .. py:method:: get_host_settings()

      Gets an array of host settings

      :return: An array of host settings



   .. py:method:: get_host_from_settings(index, variables=None, servers=None)

      Gets host URL based on the index and variables
      :param index: array index of the host settings
      :param variables: hash of variable and the corresponding value
      :param servers: an array of host settings or None
      :return: URL based on host settings



   .. py:property:: host
      Return generated host.


.. py:exception:: OpenApiException

   Bases: :py:obj:`Exception`


   The base exception class for all OpenAPIExceptions


.. py:exception:: ApiTypeError(msg, path_to_item=None, valid_classes=None, key_type=None)

   Bases: :py:obj:`OpenApiException`, :py:obj:`TypeError`


   The base exception class for all OpenAPIExceptions


   .. py:attribute:: path_to_item


   .. py:attribute:: valid_classes


   .. py:attribute:: key_type


   .. py:attribute:: full_msg


.. py:exception:: ApiValueError(msg, path_to_item=None)

   Bases: :py:obj:`OpenApiException`, :py:obj:`ValueError`


   The base exception class for all OpenAPIExceptions


   .. py:attribute:: path_to_item


   .. py:attribute:: full_msg


.. py:exception:: ApiKeyError(msg, path_to_item=None)

   Bases: :py:obj:`OpenApiException`, :py:obj:`KeyError`


   The base exception class for all OpenAPIExceptions


   .. py:attribute:: path_to_item


   .. py:attribute:: full_msg


.. py:exception:: ApiAttributeError(msg, path_to_item=None)

   Bases: :py:obj:`OpenApiException`, :py:obj:`AttributeError`


   The base exception class for all OpenAPIExceptions


   .. py:attribute:: path_to_item


   .. py:attribute:: full_msg


.. py:exception:: ApiException(status=None, reason=None, http_resp=None)

   Bases: :py:obj:`OpenApiException`


   The base exception class for all OpenAPIExceptions


   .. py:method:: __str__()

      Custom error messages for exception



.. py:class:: AccessInfo(grant=None, area=None, clip_area=None, catalog_mode=None, default_style=None, allowed_styles=None, cql_filter_read=None, cql_filter_write=None, attributes=None, matching_rules=None, local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _grant
      :value: None



   .. py:attribute:: _area
      :value: None



   .. py:attribute:: _clip_area
      :value: None



   .. py:attribute:: _catalog_mode
      :value: None



   .. py:attribute:: _default_style
      :value: None



   .. py:attribute:: _allowed_styles
      :value: None



   .. py:attribute:: _cql_filter_read
      :value: None



   .. py:attribute:: _cql_filter_write
      :value: None



   .. py:attribute:: _attributes
      :value: None



   .. py:attribute:: _matching_rules
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: grant
      E501


      :return: The grant of this AccessInfo.  # noqa: E501
      :rtype: GrantType

      :type: Gets the grant of this AccessInfo.  # noqa


   .. py:property:: catalog_mode
      E501


      :return: The catalog_mode of this AccessInfo.  # noqa: E501
      :rtype: CatalogMode

      :type: Gets the catalog_mode of this AccessInfo.  # noqa


   .. py:property:: attributes
      E501


      :return: The attributes of this AccessInfo.  # noqa: E501
      :rtype: list[LayerAttribute]

      :type: Gets the attributes of this AccessInfo.  # noqa


   .. py:property:: area
      E501


      :return: The area of this AccessInfo.  # noqa: E501
      :rtype: Geom

      :type: Gets the area of this AccessInfo.  # noqa


   .. py:property:: clip_area
      E501


      :return: The clip_area of this AccessInfo.  # noqa: E501
      :rtype: Geom

      :type: Gets the clip_area of this AccessInfo.  # noqa


   .. py:property:: default_style
      E501


      :return: The default_style of this AccessInfo.  # noqa: E501
      :rtype: str

      :type: Gets the default_style of this AccessInfo.  # noqa


   .. py:property:: allowed_styles
      E501


      :return: The allowed_styles of this AccessInfo.  # noqa: E501
      :rtype: list[str]

      :type: Gets the allowed_styles of this AccessInfo.  # noqa


   .. py:property:: cql_filter_read
      E501


      :return: The cql_filter_read of this AccessInfo.  # noqa: E501
      :rtype: str

      :type: Gets the cql_filter_read of this AccessInfo.  # noqa


   .. py:property:: cql_filter_write
      E501


      :return: The cql_filter_write of this AccessInfo.  # noqa: E501
      :rtype: str

      :type: Gets the cql_filter_write of this AccessInfo.  # noqa


   .. py:property:: matching_rules
      E501


      :return: The matching_rules of this AccessInfo.  # noqa: E501
      :rtype: list[str]

      :type: Gets the matching_rules of this AccessInfo.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: AccessRequest(user=None, roles=None, instance='*', source_address='*', service='*', request='*', subfield='*', workspace='*', layer='*', local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _user
      :value: None



   .. py:attribute:: _roles
      :value: None



   .. py:attribute:: _instance
      :value: None



   .. py:attribute:: _source_address
      :value: None



   .. py:attribute:: _service
      :value: None



   .. py:attribute:: _request
      :value: None



   .. py:attribute:: _subfield
      :value: None



   .. py:attribute:: _workspace
      :value: None



   .. py:attribute:: _layer
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: roles
      E501

      The roles the requesting user belongs to  # noqa: E501

      :return: The roles of this AccessRequest.  # noqa: E501
      :rtype: list[str]

      :type: Gets the roles of this AccessRequest.  # noqa


   .. py:property:: user
      E501

      the authentication user name performing the request for which the authorization is being requested  # noqa: E501

      :return: The user of this AccessRequest.  # noqa: E501
      :rtype: str

      :type: Gets the user of this AccessRequest.  # noqa


   .. py:property:: instance
      E501


      :return: The instance of this AccessRequest.  # noqa: E501
      :rtype: str

      :type: Gets the instance of this AccessRequest.  # noqa


   .. py:property:: source_address
      E501


      :return: The source_address of this AccessRequest.  # noqa: E501
      :rtype: str

      :type: Gets the source_address of this AccessRequest.  # noqa


   .. py:property:: service
      E501


      :return: The service of this AccessRequest.  # noqa: E501
      :rtype: str

      :type: Gets the service of this AccessRequest.  # noqa


   .. py:property:: request
      E501


      :return: The request of this AccessRequest.  # noqa: E501
      :rtype: str

      :type: Gets the request of this AccessRequest.  # noqa


   .. py:property:: subfield
      E501


      :return: The subfield of this AccessRequest.  # noqa: E501
      :rtype: str

      :type: Gets the subfield of this AccessRequest.  # noqa


   .. py:property:: workspace
      E501


      :return: The workspace of this AccessRequest.  # noqa: E501
      :rtype: str

      :type: Gets the workspace of this AccessRequest.  # noqa


   .. py:property:: layer
      E501


      :return: The layer of this AccessRequest.  # noqa: E501
      :rtype: str

      :type: Gets the layer of this AccessRequest.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: AddressRangeFilter(include_default=None, value=None, local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _include_default
      :value: None



   .. py:attribute:: _value
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: include_default
      E501


      :return: The include_default of this AddressRangeFilter.  # noqa: E501
      :rtype: bool

      :type: Gets the include_default of this AddressRangeFilter.  # noqa


   .. py:property:: value
      E501

      IPv4 address with optional /nn on the end with values from 0 - 32  # noqa: E501

      :return: The value of this AddressRangeFilter.  # noqa: E501
      :rtype: str

      :type: Gets the value of this AddressRangeFilter.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: AdminAccessInfo(admin=None, workspace=None, matching_admin_rule=None, local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _admin
      :value: None



   .. py:attribute:: _workspace
      :value: None



   .. py:attribute:: _matching_admin_rule
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: admin
      E501


      :return: The admin of this AdminAccessInfo.  # noqa: E501
      :rtype: bool

      :type: Gets the admin of this AdminAccessInfo.  # noqa


   .. py:property:: workspace
      E501


      :return: The workspace of this AdminAccessInfo.  # noqa: E501
      :rtype: str

      :type: Gets the workspace of this AdminAccessInfo.  # noqa


   .. py:property:: matching_admin_rule
      E501


      :return: The matching_admin_rule of this AdminAccessInfo.  # noqa: E501
      :rtype: str

      :type: Gets the matching_admin_rule of this AdminAccessInfo.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: AdminAccessRequest(user=None, roles=None, instance='*', source_address='*', workspace='*', local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _user
      :value: None



   .. py:attribute:: _roles
      :value: None



   .. py:attribute:: _instance
      :value: None



   .. py:attribute:: _source_address
      :value: None



   .. py:attribute:: _workspace
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: roles
      E501

      The roles the requesting user belongs to  # noqa: E501

      :return: The roles of this AdminAccessRequest.  # noqa: E501
      :rtype: list[str]

      :type: Gets the roles of this AdminAccessRequest.  # noqa


   .. py:property:: user
      E501

      the authentication user name performing the request for which the authorization is being requested  # noqa: E501

      :return: The user of this AdminAccessRequest.  # noqa: E501
      :rtype: str

      :type: Gets the user of this AdminAccessRequest.  # noqa


   .. py:property:: instance
      E501


      :return: The instance of this AdminAccessRequest.  # noqa: E501
      :rtype: str

      :type: Gets the instance of this AdminAccessRequest.  # noqa


   .. py:property:: source_address
      E501


      :return: The source_address of this AdminAccessRequest.  # noqa: E501
      :rtype: str

      :type: Gets the source_address of this AdminAccessRequest.  # noqa


   .. py:property:: workspace
      E501


      :return: The workspace of this AdminAccessRequest.  # noqa: E501
      :rtype: str

      :type: Gets the workspace of this AdminAccessRequest.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: AdminGrantType(local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: ADMIN
      :value: 'ADMIN'



   .. py:attribute:: USER
      :value: 'USER'



   .. py:attribute:: allowable_values

      Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type.
      attribute_map (dict): The key is attribute name and the value is json key in definition.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: discriminator
      :value: None



   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: AdminRule(id=None, priority=None, access=None, ext_id=None, name=None, description=None, instance=None, role=None, user=None, workspace=None, address_range=None, local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _id
      :value: None



   .. py:attribute:: _priority
      :value: None



   .. py:attribute:: _access
      :value: None



   .. py:attribute:: _ext_id
      :value: None



   .. py:attribute:: _name
      :value: None



   .. py:attribute:: _description
      :value: None



   .. py:attribute:: _instance
      :value: None



   .. py:attribute:: _role
      :value: None



   .. py:attribute:: _user
      :value: None



   .. py:attribute:: _workspace
      :value: None



   .. py:attribute:: _address_range
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: id
      E501


      :return: The id of this AdminRule.  # noqa: E501
      :rtype: str

      :type: Gets the id of this AdminRule.  # noqa


   .. py:property:: priority
      E501


      :return: The priority of this AdminRule.  # noqa: E501
      :rtype: int

      :type: Gets the priority of this AdminRule.  # noqa


   .. py:property:: access
      E501


      :return: The access of this AdminRule.  # noqa: E501
      :rtype: AdminGrantType

      :type: Gets the access of this AdminRule.  # noqa


   .. py:property:: ext_id
      E501


      :return: The ext_id of this AdminRule.  # noqa: E501
      :rtype: str

      :type: Gets the ext_id of this AdminRule.  # noqa


   .. py:property:: name
      E501


      :return: The name of this AdminRule.  # noqa: E501
      :rtype: str

      :type: Gets the name of this AdminRule.  # noqa


   .. py:property:: description
      E501


      :return: The description of this AdminRule.  # noqa: E501
      :rtype: str

      :type: Gets the description of this AdminRule.  # noqa


   .. py:property:: instance
      E501


      :return: The instance of this AdminRule.  # noqa: E501
      :rtype: str

      :type: Gets the instance of this AdminRule.  # noqa


   .. py:property:: role
      E501


      :return: The role of this AdminRule.  # noqa: E501
      :rtype: str

      :type: Gets the role of this AdminRule.  # noqa


   .. py:property:: user
      E501


      :return: The user of this AdminRule.  # noqa: E501
      :rtype: str

      :type: Gets the user of this AdminRule.  # noqa


   .. py:property:: workspace
      E501


      :return: The workspace of this AdminRule.  # noqa: E501
      :rtype: str

      :type: Gets the workspace of this AdminRule.  # noqa


   .. py:property:: address_range
      E501

      IPv4 address with optional /nn on the end with values from 0 - 32  # noqa: E501

      :return: The address_range of this AdminRule.  # noqa: E501
      :rtype: str

      :type: Gets the address_range of this AdminRule.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: AdminRuleFilter(instance=None, grant_type=None, user=None, roles=None, workspace=None, source_address=None, local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _instance
      :value: None



   .. py:attribute:: _grant_type
      :value: None



   .. py:attribute:: _user
      :value: None



   .. py:attribute:: _roles
      :value: None



   .. py:attribute:: _workspace
      :value: None



   .. py:attribute:: _source_address
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: instance
      E501


      :return: The instance of this AdminRuleFilter.  # noqa: E501
      :rtype: TextFilter

      :type: Gets the instance of this AdminRuleFilter.  # noqa


   .. py:property:: grant_type
      E501


      :return: The grant_type of this AdminRuleFilter.  # noqa: E501
      :rtype: AdminGrantType

      :type: Gets the grant_type of this AdminRuleFilter.  # noqa


   .. py:property:: user
      E501


      :return: The user of this AdminRuleFilter.  # noqa: E501
      :rtype: TextFilter

      :type: Gets the user of this AdminRuleFilter.  # noqa


   .. py:property:: roles
      E501


      :return: The roles of this AdminRuleFilter.  # noqa: E501
      :rtype: SetFilter

      :type: Gets the roles of this AdminRuleFilter.  # noqa


   .. py:property:: workspace
      E501


      :return: The workspace of this AdminRuleFilter.  # noqa: E501
      :rtype: TextFilter

      :type: Gets the workspace of this AdminRuleFilter.  # noqa


   .. py:property:: source_address
      E501


      :return: The source_address of this AdminRuleFilter.  # noqa: E501
      :rtype: AddressRangeFilter

      :type: Gets the source_address of this AdminRuleFilter.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: CatalogMode(local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: HIDE
      :value: 'HIDE'



   .. py:attribute:: CHALLENGE
      :value: 'CHALLENGE'



   .. py:attribute:: MIXED
      :value: 'MIXED'



   .. py:attribute:: allowable_values

      Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type.
      attribute_map (dict): The key is attribute name and the value is json key in definition.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: discriminator
      :value: None



   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: Geom(wkt=None, wkb=None, local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _wkt
      :value: None



   .. py:attribute:: _wkb
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: wkt
      E501


      :return: The wkt of this Geom.  # noqa: E501
      :rtype: str

      :type: Gets the wkt of this Geom.  # noqa


   .. py:property:: wkb
      E501


      :return: The wkb of this Geom.  # noqa: E501
      :rtype: str

      :type: Gets the wkb of this Geom.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: GrantType(local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: ALLOW
      :value: 'ALLOW'



   .. py:attribute:: DENY
      :value: 'DENY'



   .. py:attribute:: LIMIT
      :value: 'LIMIT'



   .. py:attribute:: allowable_values

      Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type.
      attribute_map (dict): The key is attribute name and the value is json key in definition.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: discriminator
      :value: None



   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: InsertPosition(local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: FIXED
      :value: 'FIXED'



   .. py:attribute:: FROM_START
      :value: 'FROM_START'



   .. py:attribute:: FROM_END
      :value: 'FROM_END'



   .. py:attribute:: allowable_values

      Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type.
      attribute_map (dict): The key is attribute name and the value is json key in definition.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: discriminator
      :value: None



   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: LayerAttribute(name=None, data_type=None, access=None, local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _name
      :value: None



   .. py:attribute:: _data_type
      :value: None



   .. py:attribute:: _access
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: name
      E501


      :return: The name of this LayerAttribute.  # noqa: E501
      :rtype: str

      :type: Gets the name of this LayerAttribute.  # noqa


   .. py:property:: data_type
      E501


      :return: The data_type of this LayerAttribute.  # noqa: E501
      :rtype: str

      :type: Gets the data_type of this LayerAttribute.  # noqa


   .. py:property:: access
      E501


      :return: The access of this LayerAttribute.  # noqa: E501
      :rtype: str

      :type: Gets the access of this LayerAttribute.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: LayerDetails(type=None, default_style=None, cql_filter_read=None, cql_filter_write=None, allowed_area=None, spatial_filter_type=None, catalog_mode=None, allowed_styles=None, layer_attributes=None, local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _type
      :value: None



   .. py:attribute:: _default_style
      :value: None



   .. py:attribute:: _cql_filter_read
      :value: None



   .. py:attribute:: _cql_filter_write
      :value: None



   .. py:attribute:: _allowed_area
      :value: None



   .. py:attribute:: _spatial_filter_type
      :value: None



   .. py:attribute:: _catalog_mode
      :value: None



   .. py:attribute:: _allowed_styles
      :value: None



   .. py:attribute:: _layer_attributes
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: type
      E501


      :return: The type of this LayerDetails.  # noqa: E501
      :rtype: str

      :type: Gets the type of this LayerDetails.  # noqa


   .. py:property:: default_style
      E501


      :return: The default_style of this LayerDetails.  # noqa: E501
      :rtype: str

      :type: Gets the default_style of this LayerDetails.  # noqa


   .. py:property:: cql_filter_read
      E501


      :return: The cql_filter_read of this LayerDetails.  # noqa: E501
      :rtype: str

      :type: Gets the cql_filter_read of this LayerDetails.  # noqa


   .. py:property:: cql_filter_write
      E501


      :return: The cql_filter_write of this LayerDetails.  # noqa: E501
      :rtype: str

      :type: Gets the cql_filter_write of this LayerDetails.  # noqa


   .. py:property:: spatial_filter_type
      E501


      :return: The spatial_filter_type of this LayerDetails.  # noqa: E501
      :rtype: SpatialFilterType

      :type: Gets the spatial_filter_type of this LayerDetails.  # noqa


   .. py:property:: catalog_mode
      E501


      :return: The catalog_mode of this LayerDetails.  # noqa: E501
      :rtype: CatalogMode

      :type: Gets the catalog_mode of this LayerDetails.  # noqa


   .. py:property:: allowed_styles
      E501


      :return: The allowed_styles of this LayerDetails.  # noqa: E501
      :rtype: list[str]

      :type: Gets the allowed_styles of this LayerDetails.  # noqa


   .. py:property:: layer_attributes
      E501


      :return: The layer_attributes of this LayerDetails.  # noqa: E501
      :rtype: list[LayerAttribute]

      :type: Gets the layer_attributes of this LayerDetails.  # noqa


   .. py:property:: allowed_area
      E501


      :return: The allowed_area of this LayerDetails.  # noqa: E501
      :rtype: Geom

      :type: Gets the allowed_area of this LayerDetails.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: Rule(id=None, priority=None, ext_id=None, name=None, description=None, instance=None, access=None, limits=None, role=None, user=None, address_range=None, service=None, request=None, subfield=None, workspace=None, layer=None, local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _id
      :value: None



   .. py:attribute:: _priority
      :value: None



   .. py:attribute:: _ext_id
      :value: None



   .. py:attribute:: _name
      :value: None



   .. py:attribute:: _description
      :value: None



   .. py:attribute:: _instance
      :value: None



   .. py:attribute:: _access
      :value: None



   .. py:attribute:: _limits
      :value: None



   .. py:attribute:: _role
      :value: None



   .. py:attribute:: _user
      :value: None



   .. py:attribute:: _address_range
      :value: None



   .. py:attribute:: _service
      :value: None



   .. py:attribute:: _request
      :value: None



   .. py:attribute:: _subfield
      :value: None



   .. py:attribute:: _workspace
      :value: None



   .. py:attribute:: _layer
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: id
      E501


      :return: The id of this Rule.  # noqa: E501
      :rtype: str

      :type: Gets the id of this Rule.  # noqa


   .. py:property:: priority
      E501


      :return: The priority of this Rule.  # noqa: E501
      :rtype: int

      :type: Gets the priority of this Rule.  # noqa


   .. py:property:: ext_id
      E501


      :return: The ext_id of this Rule.  # noqa: E501
      :rtype: str

      :type: Gets the ext_id of this Rule.  # noqa


   .. py:property:: name
      E501


      :return: The name of this Rule.  # noqa: E501
      :rtype: str

      :type: Gets the name of this Rule.  # noqa


   .. py:property:: description
      E501


      :return: The description of this Rule.  # noqa: E501
      :rtype: str

      :type: Gets the description of this Rule.  # noqa


   .. py:property:: instance
      E501


      :return: The instance of this Rule.  # noqa: E501
      :rtype: str

      :type: Gets the instance of this Rule.  # noqa


   .. py:property:: access
      E501


      :return: The access of this Rule.  # noqa: E501
      :rtype: GrantType

      :type: Gets the access of this Rule.  # noqa


   .. py:property:: limits
      E501


      :return: The limits of this Rule.  # noqa: E501
      :rtype: RuleLimits

      :type: Gets the limits of this Rule.  # noqa


   .. py:property:: role
      E501


      :return: The role of this Rule.  # noqa: E501
      :rtype: str

      :type: Gets the role of this Rule.  # noqa


   .. py:property:: user
      E501


      :return: The user of this Rule.  # noqa: E501
      :rtype: str

      :type: Gets the user of this Rule.  # noqa


   .. py:property:: address_range
      E501

      IPv4 address with optional /nn on the end with values from 0 - 32  # noqa: E501

      :return: The address_range of this Rule.  # noqa: E501
      :rtype: str

      :type: Gets the address_range of this Rule.  # noqa


   .. py:property:: service
      E501


      :return: The service of this Rule.  # noqa: E501
      :rtype: str

      :type: Gets the service of this Rule.  # noqa


   .. py:property:: request
      E501


      :return: The request of this Rule.  # noqa: E501
      :rtype: str

      :type: Gets the request of this Rule.  # noqa


   .. py:property:: subfield
      E501


      :return: The subfield of this Rule.  # noqa: E501
      :rtype: str

      :type: Gets the subfield of this Rule.  # noqa


   .. py:property:: workspace
      E501


      :return: The workspace of this Rule.  # noqa: E501
      :rtype: str

      :type: Gets the workspace of this Rule.  # noqa


   .. py:property:: layer
      E501


      :return: The layer of this Rule.  # noqa: E501
      :rtype: str

      :type: Gets the layer of this Rule.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: RuleFilter(instance=None, user=None, roles=None, service=None, request=None, subfield=None, workspace=None, layer=None, source_address=None, local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _instance
      :value: None



   .. py:attribute:: _user
      :value: None



   .. py:attribute:: _roles
      :value: None



   .. py:attribute:: _service
      :value: None



   .. py:attribute:: _request
      :value: None



   .. py:attribute:: _subfield
      :value: None



   .. py:attribute:: _workspace
      :value: None



   .. py:attribute:: _layer
      :value: None



   .. py:attribute:: _source_address
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: instance
      E501


      :return: The instance of this RuleFilter.  # noqa: E501
      :rtype: TextFilter

      :type: Gets the instance of this RuleFilter.  # noqa


   .. py:property:: user
      E501


      :return: The user of this RuleFilter.  # noqa: E501
      :rtype: TextFilter

      :type: Gets the user of this RuleFilter.  # noqa


   .. py:property:: roles
      E501


      :return: The roles of this RuleFilter.  # noqa: E501
      :rtype: SetFilter

      :type: Gets the roles of this RuleFilter.  # noqa


   .. py:property:: service
      E501


      :return: The service of this RuleFilter.  # noqa: E501
      :rtype: TextFilter

      :type: Gets the service of this RuleFilter.  # noqa


   .. py:property:: request
      E501


      :return: The request of this RuleFilter.  # noqa: E501
      :rtype: TextFilter

      :type: Gets the request of this RuleFilter.  # noqa


   .. py:property:: subfield
      E501


      :return: The subfield of this RuleFilter.  # noqa: E501
      :rtype: TextFilter

      :type: Gets the subfield of this RuleFilter.  # noqa


   .. py:property:: workspace
      E501


      :return: The workspace of this RuleFilter.  # noqa: E501
      :rtype: TextFilter

      :type: Gets the workspace of this RuleFilter.  # noqa


   .. py:property:: layer
      E501


      :return: The layer of this RuleFilter.  # noqa: E501
      :rtype: TextFilter

      :type: Gets the layer of this RuleFilter.  # noqa


   .. py:property:: source_address
      E501


      :return: The source_address of this RuleFilter.  # noqa: E501
      :rtype: AddressRangeFilter

      :type: Gets the source_address of this RuleFilter.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: RuleLimits(allowed_area=None, spatial_filter_type=None, catalog_mode=None, local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _allowed_area
      :value: None



   .. py:attribute:: _spatial_filter_type
      :value: None



   .. py:attribute:: _catalog_mode
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: spatial_filter_type
      E501


      :return: The spatial_filter_type of this RuleLimits.  # noqa: E501
      :rtype: SpatialFilterType

      :type: Gets the spatial_filter_type of this RuleLimits.  # noqa


   .. py:property:: catalog_mode
      E501


      :return: The catalog_mode of this RuleLimits.  # noqa: E501
      :rtype: CatalogMode

      :type: Gets the catalog_mode of this RuleLimits.  # noqa


   .. py:property:: allowed_area
      E501


      :return: The allowed_area of this RuleLimits.  # noqa: E501
      :rtype: Geom

      :type: Gets the allowed_area of this RuleLimits.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: SetFilter(include_default=None, values=None, local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _include_default
      :value: None



   .. py:attribute:: _values
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: include_default
      E501


      :return: The include_default of this SetFilter.  # noqa: E501
      :rtype: bool

      :type: Gets the include_default of this SetFilter.  # noqa


   .. py:property:: values
      E501


      :return: The values of this SetFilter.  # noqa: E501
      :rtype: list[str]

      :type: Gets the values of this SetFilter.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: SpatialFilterType(local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: INTERSECT
      :value: 'INTERSECT'



   .. py:attribute:: CLIP
      :value: 'CLIP'



   .. py:attribute:: allowable_values

      Attributes:
      openapi_types (dict): The key is attribute name and the value is attribute type.
      attribute_map (dict): The key is attribute name and the value is json key in definition.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: discriminator
      :value: None



   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: TextFilter(include_default=None, value=None, local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _include_default
      :value: None



   .. py:attribute:: _value
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: include_default
      E501


      :return: The include_default of this TextFilter.  # noqa: E501
      :rtype: bool

      :type: Gets the include_default of this TextFilter.  # noqa


   .. py:property:: value
      E501

      An absent value will match both set and default values for the property, a value with only the character literal '*' will match only the default values for the property, any other specific value will match properties with that value  # noqa: E501

      :return: The value of this TextFilter.  # noqa: E501
      :rtype: str

      :type: Gets the value of this TextFilter.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: Wkb(wkb=None, local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _wkb
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: wkb
      E501


      :return: The wkb of this Wkb.  # noqa: E501
      :rtype: str

      :type: Gets the wkb of this Wkb.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



.. py:class:: Wkt(wkt=None, local_vars_configuration=None)

   Bases: :py:obj:`object`


   NOTE: This class is auto generated by OpenAPI Generator.
   Ref: https://openapi-generator.tech

   Do not edit the class manually.


   .. py:attribute:: openapi_types


   .. py:attribute:: attribute_map


   .. py:attribute:: local_vars_configuration


   .. py:attribute:: _wkt
      :value: None



   .. py:attribute:: discriminator
      :value: None



   .. py:property:: wkt
      E501


      :return: The wkt of this Wkt.  # noqa: E501
      :rtype: str

      :type: Gets the wkt of this Wkt.  # noqa


   .. py:method:: to_dict(serialize=False)

      Returns the model properties as a dict



   .. py:method:: to_str()

      Returns the string representation of the model



   .. py:method:: __repr__()

      For `print` and `pprint`



   .. py:method:: __eq__(other)

      Returns true if both objects are equal



   .. py:method:: __ne__(other)

      Returns true if both objects are not equal



