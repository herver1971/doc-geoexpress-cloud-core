pavement
========

.. py:module:: pavement


Attributes
----------

.. autoapisummary::

   pavement._keepdb
   pavement.dev_config
   pavement.dev_config
   pavement.logger


Functions
---------

.. autoapisummary::

   pavement.grab
   pavement.setup_geoserver
   pavement._configure_data_dir
   pavement.static
   pavement.setup
   pavement.grab_winfiles
   pavement.win_install_deps
   pavement.upgradedb
   pavement.sync
   pavement.package
   pavement.start
   pavement.stop_django
   pavement.stop_geoserver
   pavement.stop
   pavement.start_django
   pavement.start_messaging
   pavement.start_geoserver
   pavement.test
   pavement.test_bdd
   pavement.test_javascript
   pavement.test_integration
   pavement.run_tests
   pavement.reset
   pavement._reset
   pavement.reset_hard
   pavement.setup_data
   pavement.deb
   pavement.publish
   pavement.versions
   pavement.kill
   pavement.waitfor
   pavement._copytree
   pavement.justcopy
   pavement.str2bool


Module Contents
---------------

.. py:data:: _keepdb

.. py:data:: dev_config
   :value: None


.. py:data:: dev_config

.. py:data:: logger

.. py:function:: grab(src, dest, name)

.. py:function:: setup_geoserver(options)

   Prepare a testing instance of GeoServer.


.. py:function:: _configure_data_dir()

.. py:function:: static(options)

.. py:function:: setup(options)

   Get dependencies and prepare a GeoNode development environment.


.. py:function:: grab_winfiles(url, dest, packagename)

.. py:function:: win_install_deps(options)

   Install all Windows Binary automatically
   This can be removed as wheels become available for these packages


.. py:function:: upgradedb(options)

   Add 'fake' data migrations for existing tables from legacy GeoNode versions


.. py:function:: sync(options)

   Run the migrate and migrate management commands to create and migrate a DB


.. py:function:: package(options)

   Creates a tarball to use for building the system elsewhere


.. py:function:: start(options)

   Start GeoNode (Django, GeoServer & Client)


.. py:function:: stop_django(options)

   Stop the GeoNode Django application


.. py:function:: stop_geoserver(options)

   Stop GeoServer


.. py:function:: stop(options)

   Stop GeoNode


.. py:function:: start_django(options)

   Start the GeoNode Django application


.. py:function:: start_messaging(options)

   Start the GeoNode messaging server


.. py:function:: start_geoserver(options)

   Start GeoServer with GeoNode extensions


.. py:function:: test(options)

   Run GeoNode's Unit Test Suite


.. py:function:: test_bdd(options)

   Run GeoNode's BDD Test Suite


.. py:function:: test_javascript(options)

.. py:function:: test_integration(options)

   Run GeoNode's Integration test suite against the external apps


.. py:function:: run_tests(options)

   Executes the entire test suite.


.. py:function:: reset(options)

   Reset a development environment (Database, GeoServer & Catalogue)


.. py:function:: _reset()

.. py:function:: reset_hard(options)

   Reset a development environment (Database, GeoServer & Catalogue)


.. py:function:: setup_data(options)

   Import sample data (from gisdata package) into GeoNode


.. py:function:: deb(options)

   Creates debian packages.

   Example uses:
       paver deb
       paver deb -k 12345
       paver deb -k 12345 -p geonode/testing


.. py:function:: publish(options)

.. py:function:: versions()

.. py:function:: kill(arg1, arg2)

   Stops a proces that contains arg1 and is filtered by arg2


.. py:function:: waitfor(url, timeout=300)

.. py:function:: _copytree(src, dst, symlinks=False, ignore=None)

.. py:function:: justcopy(origin, target)

.. py:function:: str2bool(v)

